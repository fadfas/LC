void showTrace(vector<vector<int>> dp, vector<int> input) {
	int m = dp.size();
	int n = dp[0].size();
	int size = input.size();
	vector<int> selected(size, 0);
	int j = n - 1;
	for (int i = m - 1; i >= 1; --i) {
		if (dp[i][j] == dp[i - 1][j]) {
			selected[i - 1] = 0;
		}
		else {
			selected[i - 1] = 1;
			j = j - input[i - 1];
		}
	}
	cout << "其中一个子数组包含以下数字：" << endl;
	for (int i = 0; i < selected.size(); ++i) {
		if (selected[i] == 1) {
			cout << input[i] << " ";
		}
	}
	cout << endl;
}

void find(vector<int> input) {
	int n = input.size();
	int sum = 0;
	for (int e : input) {
		sum += e;
	}

	vector<vector<int>> dp(n + 1, vector<int>(sum / 2 + 1, 0));
	for (int i = 1; i <= n; ++i) {
		for (int j = 1; j <= sum / 2; ++j) {
			dp[i][j] = dp[i - 1][j];
			if (input[i - 1] <= j && dp[i - 1][j - input[i - 1]] + input[i - 1] > dp[i][j]) {
				dp[i][j] = dp[i - 1][j - input[i - 1]] + input[i - 1];
			}
		}
	}
	cout << "最小差值为：" << sum - dp[n][sum / 2] - dp[n][sum / 2] << endl;
	showTrace(dp, input);
}

int main() {
	vector<int> input = { 2,5,6,10 };
	find(input);
}

=================================================
类背包问题：将数组分为两个子数组，使两个子数组的和的差值最小
https ://blog.csdn.net/qq_26222859/article/details/69335310

原始背包问题以及如何打印路径：
https ://blog.csdn.net/xp731574722/article/details/70766804
