class Solution {
public:
	string decodeString(string s) {
		int i = 0;//因为下面的函数的i为引用类型，所以必须定义一个变量
		return decodeString(s, i);
	}
private:
	string decodeString(string& s, int& i) {//函数名可以一样~只不过参数需要不同
		string res = "";      //另外i要用引用类型
		while (i<s.size() && s[i] != ']') {
			if (!isdigit(s[i])) {
				res += s[i++];
			}
			else {
				int n = 0;
				while (i<s.size() && isdigit(s[i])) {
					n = n * 10 + s[i] - '0';
					++i;
				}
				++i;//跳过 [ 
				string t = decodeString(s, i);
				//此时要假设，此函数能够完整的处理一个标准模板问题，
				//因此当一个大的问题套一个小问题的时候，直接用这个函数解决
				//小问题，然后继续处理当前模板问题，也就是下面的++i
				++i;
				while (n--) {
					res += t;
				}
			}
		}
        return res;
	}
};
============================================
394. Decode String
Given an encoded string, return it's decoded string.

The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.

You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.

Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won't be input like 3a or 2[4].

Examples:

s = "3[a]2[bc]", return "aaabcbc".
s = "3[a2[c]]", return "accaccacc".
s = "2[abc]3[cd]ef", return "abcabccdcdcdef".
