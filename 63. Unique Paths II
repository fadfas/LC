class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        if(obstacleGrid.size()==0){
            return 0;
        }
        int m = obstacleGrid.size(), n = obstacleGrid[0].size();
        // vector<vector<int> > dp(m, vector<int>(n, 1));
        vector<vector<int> > dp(m, vector<int>(n, 0));
        for (int i = 0; i < m&&(obstacleGrid[i][0]==0);++i){
            dp[i][0] = 1;
        }
        for (int j = 0; j < n&&(obstacleGrid[0][j]==0);++j){
            dp[0][j] = 1;
        }
        //下面这种是错误的：要注意一旦第一行(列)有一个障碍物后，此行(列)后续的数组元素，应全部赋值为0；
        // for (int j = 0; j < n;++j){
        //     dp[0][j] = obstacleGrid[0][j] == 1 ? 0 : 1;
        // }
        for (int i = 1; i < m; ++i)
        {
            for (int j = 1; j < n; ++j)
            {
                dp[i][j] = obstacleGrid[i][j] == 1 ? 0 : dp[i - 1][j] + dp[i][j - 1];
            }
        }
        return dp[m - 1][n - 1];
    }
};
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        if(obstacleGrid.size()==0){
            return 0;
        }
        int m = obstacleGrid.size(), n = obstacleGrid[0].size();
        vector<int> dp(n, 0);
        for (int j = 0; j < n&&(obstacleGrid[0][j]==0);++j){
            dp[j] = 1;
        }
        for (int i = 1; i < m; ++i)
        {
            dp[0] = (dp[0] == 0||obstacleGrid[i][0]==1) ? 0 : 1;
            for (int j = 1; j < n; ++j)
            {
                dp[j] = obstacleGrid[i][j] == 1 ? 0 : dp[j] + dp[j - 1];
            }
        }
        return dp[n - 1];
    }
};
==============================================
63. Unique Paths II
A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

Now consider if some obstacles are added to the grids. How many unique paths would there be?
