class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();
        int* count=new int[n];
        count[0]=1;
        for(int i=0;i<m;++i){
            for(int j=0;j<n;++j){
                if(obstacleGrid[i][j]==1){
                    count[j]=0;
                    continue;
                }
                if(!i&&!j)
                    continue;
                if(i==0){
                    count[j]=count[j-1];
                }else if(j==0){
                    count[j]=count[j];
                }else{
                    count[j]=count[j]+count[j-1];
                }
            }
        }
        return count[n-1];
    }
};
==============================================
63. Unique Paths II
A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

Now consider if some obstacles are added to the grids. How many unique paths would there be?
