class Solution { //忽略这种二分的方法
public:
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        vector<int> fake={};
        for(int i=0;i<n;++i){
            int left=0,right=fake.size();
            while(left<right){
                int mid=left+((right-left)>>1);
                if(fake[mid]<nums[i]){
                    left=mid+1;
                }else{
                    right=mid;
                }
            }
            if(right==fake.size()){
                fake.push_back(nums[i]);
            }else{
                fake[right]=nums[i];
            }
        }
        return fake.size();
    }
};

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        vector<int> dp(n,1);//都要初始化为！！！！dp[i]代表一当前位置为终点的LIS，因此至少为1
        int res=0;
        for(int i=0;i<n;++i){
            for(int j=0;j<i;++j){
                if(nums[i]>nums[j]){
                    dp[i]=max(dp[i],dp[j]+1);
                }
            }
            res=max(res,dp[i]);
        }
        return res;
    }
};
==============================================
300. Longest Increasing Subsequence
Given an unsorted array of integers, find the length of longest increasing subsequence.

Example:

Input: [10,9,2,5,3,7,101,18]
Output: 4 
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. 
Note:

There may be more than one LIS combination, it is only necessary for you to return the length.
Your algorithm should run in O(n2) complexity.
Follow up: Could you improve it to O(n log n) time complexity?
