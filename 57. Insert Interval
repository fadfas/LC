/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
        vector<Interval> res;
        if(intervals.empty())
            return {newInterval};
        int start=newInterval.start;
        int end=newInterval.end;
        int n=intervals.size();
        int i=0;
        for(;i<n&&intervals[i].end<start;++i)
            res.push_back(intervals[i]);
        
        if(i!=n)   //和map.find()相似，要判断找到的地方是不是最后一个位置(!=map.end())，否则会溢出的
            start=min(start,intervals[i].start);
        
        while(i<n&&intervals[i].start<=end)
            ++i;
        
        if(i!=0) 
            end=max(end,intervals[i-1].end);
        
        res.push_back({start,end});
        
        for(;i<n;++i)
            res.push_back(intervals[i]);
        
        return res;        
    }
};
========================================
57. Insert Interval
Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:

Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]
