class Solution {
public:
	int countCornerRectangles(vector<vector<int>>& grid) {
		int rows = grid.size();
		if (!rows) return 0;
		int cols = grid[0].size();
		int res = 0;
		for (int i = 0; i<rows; ++i) {
			for (int j = i + 1; j<rows; ++j) {
				int counter = 0;
				for (int k = 0; k<cols; ++k) {
					if (grid[i][k] == 1 && grid[j][k] == 1) ++counter;
				}
				res += counter * (counter - 1) / 2;
			}
		}
		return res;
	}
};
===========================================
750. Number Of Corner Rectangles
Given a grid where each entry is only 0 or 1, find the number of corner rectangles.

A corner rectangle is 4 distinct 1s on the grid that form an axis-aligned rectangle. Note that only the corners need to have the value 1. Also, all four 1s used must be distinct.

Example 1:

Input: grid = 
[[1, 0, 0, 1, 0],
 [0, 0, 1, 0, 1],
 [0, 0, 0, 1, 0],
 [1, 0, 1, 0, 1]]
Output: 1
Explanation: There is only one corner rectangle, with corners grid[1][2], grid[1][4], grid[3][2], grid[3][4].
