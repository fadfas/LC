/*
 * @lc app=leetcode id=25 lang=cpp
 *
 * [25] Reverse Nodes in k-Group
 */

// @lc code=start
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if(head == nullptr){
            return head;
        }
        deque<ListNode*> dq;
        ListNode* pDummyHead=new ListNode(-1);
        ListNode* pCur=pDummyHead;
        while(head){
            int i=0;
            for(;i<k&&head;++i){
                dq.push_back(head);
                ListNode* pNode=head->next;
                head->next=nullptr;
                head=pNode;
            }
            if(i<k){
                while(!dq.empty()){
                    pCur->next=dq.front();
                    dq.pop_front();
                    pCur=pCur->next;
                }
            }else{
                while(!dq.empty()){
                    pCur->next=dq.back();
                    dq.pop_back();
                    pCur=pCur->next;
                }
            }
        }
        return pDummyHead->next;
    }
};
// @lc code=end
===============================================
25. Reverse Nodes in k-Group
Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.
