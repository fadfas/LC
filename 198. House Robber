class Solution {
public:
    int rob(vector<int>& nums) {
        vector<int> dp(nums.size()+1,0);//dp的定义是：截止到当前房间，所能获得的最大收益
        dp[1]=nums[0];
        for(int i=2;i<nums.size()+1;++i){
            dp[i]=max(nums[i-1]+dp[i-2],dp[i-1]);
        }
        return dp[nums.size()];
    }
};

class Solution {//很经典的动态规划的问题，而且连接的讲解对于dp的分析写的非常的好！！！！！！!!!!!!!!!!!!!!!!!!!!
public:         //动态规划的问题，很多都是类似于：对于位置i，我做还是不做某件事，然后以此开写出dp方程
    int rob(vector<int>& nums) {
        if(nums.size()<1)
            return 0;
        int len=nums.size();
        int* memo=new int[len+1]; //定义动态规划的数组的时候，不要死板，不一定dp数组的第一个，就和nums的
                                //第一个位置对应同样的问题，怎么方便怎么来！！！！！
        fill_n(memo,len+1,-1);
        memo[0]=0;
        memo[1]=nums[0];
        for(int i=1;i<len;++i){
            memo[i+1]=max(nums[i]+memo[i-1],memo[i]);//注意，memo[i]的含义就是：截止到i位置，所能获得的【最大】
                        //的收益，因此对于max的第二个参数，不用再想，我需不需要考虑memo[i-1]和memo[i-1]哪个收益更大
        }
        return memo[len];
    }
};

class Solution {  //另一解法，空间复杂度再次降低：观察上面的解法，发现每次迭代只使用到了memo[i-1]和memo[i-2]的信息，因此可以用两个变量来取代
public:
    int rob(vector<int>& nums) {
        if(nums.empty())
            return 0;
        int cur=0,pre1=0,pre2=0;
        pre1=0,pre2=nums[0];
        for(int i=1;i<nums.size();++i){
            cur=max(pre1+nums[i],pre2);
            pre1=pre2;
            pre2=cur;
        }
        return pre2;
    }
};
============================================
This particular problem and most of others can be approached using the following sequence:

    Find recursive relation
    Recursive (top-down)
    Recursive + memo (top-down)
    Iterative + memo (bottom-up)
    Iterative + N variables (bottom-up)
    
Step 1. Figure out recursive relation.
A robber has 2 options: a) rob current house i; b) don't rob current house.
If an option "a" is selected it means she can't rob previous i-1 house but can safely proceed to the one before previous i-2 and gets all cumulative loot that follows.
If an option "b" is selected the robber gets all the possible loot from robbery of i-1 and all the following buildings.
So it boils down to calculating what is more profitable:

      robbery of current house + loot from houses before the previous
      loot from the previous house robbery and any loot captured before that
      rob(i) = Math.max( rob(i - 2) + currentHouseValue, rob(i - 1) )
      
Step 2. Recursive (top-down)
Converting the recurrent relation from Step 1 shound't be very hard.
      public int rob(int[] nums) {
          return rob(nums, nums.length - 1);
      }
      private int rob(int[] nums, int i) {
          if (i < 0) {
              return 0;
          }
          return Math.max(rob(nums, i - 2) + nums[i], rob(nums, i - 1));
      }
This algorithm will process the same i multiple times and it needs improvement. Time complexity: [to fill]

Step 3. Recursive + memo (top-down).

      int[] memo;
      public int rob(int[] nums) {
          memo = new int[nums.length + 1];
          Arrays.fill(memo, -1);
          return rob(nums, nums.length - 1);
      }

      private int rob(int[] nums, int i) {
          if (i < 0) {
              return 0;
          }
          if (memo[i] >= 0) {
              return memo[i];
          }
          int result = Math.max(rob(nums, i - 2) + nums[i], rob(nums, i - 1));
          memo[i] = result;
          return result;
      }

Much better, this should run in O(n) time. Space complexity is O(n) as well, because of the recursion stack, let's try to get rid of it.

Step 4. Iterative + memo (bottom-up)

      public int rob(int[] nums) {
          if (nums.length == 0) return 0;
          int[] memo = new int[nums.length + 1];
          memo[0] = 0;
          memo[1] = nums[0];
          for (int i = 1; i < nums.length; i++) {
              int val = nums[i];
              memo[i+1] = Math.max(memo[i], memo[i-1] + val);
          }
          return memo[nums.length];
      }

Step 5. Iterative + 2 variables (bottom-up)
We can notice that in the previous step we use only memo[i] and memo[i-1], so going just 2 steps back. We can hold them in 2 variables instead. This optimization is met in Fibonacci sequence creation and some other problems [to paste links].

      /* the order is: prev2, prev1, num  */
      public int rob(int[] nums) {
          if (nums.length == 0) return 0;
          int prev1 = 0;
          int prev2 = 0;
          for (int num : nums) {
              int tmp = prev1;
              prev1 = Math.max(prev2 + num, prev1);
              prev2 = tmp;
          }
          return prev1;
      }


上面文章的原文链接：https://leetcode.com/problems/house-robber/discuss/156523/From-good-to-great.-How-to-approach-most-of-DP-problems.
198. House Robber
You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.
