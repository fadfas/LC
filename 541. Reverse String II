class Solution
{
public:
    string reverseStr(string s, int k)
    {
        int n = s.size();
        for (int i = 0; i * 2 * k < n; ++i)
        {//这种定义方式，i表示第几轮翻转；所以for的第二个参数进行判断
        //的时候，要复杂一点，但是第三个参数，单纯加1就可以了
            reverse(s.begin() + 2 * k * i, s.begin() + min(2 * k * i + k, n));
        }
        //下面这种方式，i表示每一轮翻转操作的开始索引值
        //因此第二个参数，只需要判断这一轮开始索引是否小于n就行
        //若小于，就说明还有需要翻转的；第三个参数就复杂一点
        //需要计算下一次可能开始的索引值是多少
        // for (int i = 0; i < n;i=i+2*k){
        //     reverse(s.begin() + i, s.begin() + min(i + k, n));
        // }
        return s;
    }
};

class Solution {
public:
string reverseStr2(string s, int k) {
        string input = s;
        helper(input, 0, k);
        return input;
    }
private:
    void helper(string& s,int i,int k){
        if(s.size()-1-i+1<k){
            myReverse(s, i, s.size() - 1);
            return;
        }
        if(s.size()-1-i+1<2*k){
            myReverse(s, i, i + k - 1);
            return;
        }
        helper(s, i + 2*k, k);
        myReverse(s, i, i + k - 1);
    }
    void myReverse(string& s,int i,int j){
        while(i<j){
            char tmp = s[i];
            s[i] = s[j];
            s[j] = tmp;
            i++, j--;
        }
    }
};
=====================================================================
541. Reverse String II
Given a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string.

If there are fewer than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and leave the other as original.
