/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> merge(vector<Interval>& intervals) {
        for(auto &e:intervals){
            times[e.start]++,times[e.end]--;
        }
        int count=0,start=0;
        vector<Interval> res;
        for(auto &e:times){
            if(count==0)
                start=e.first;
            count+=e.second;
            if(count==0)
                res.push_back({start,e.first});
        }
        return res;
    }
private:
    map<int,int> times;
};
================================================
56. Merge Intervals
Given a collection of intervals, merge all overlapping intervals.

Example 1:

Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
