class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        vector<vector<int> > res;
        if(intervals.empty()){
            return res;
        }
        sort(intervals.begin(), intervals.end());
        //, [](const vector<int> &lhs, const vector<int> &rhs){ return lhs[0] < rhs[0]; }   可以不用自定义比较器，默认按照第一个元素排序(不论子元素是几维的,也不论子元素的维度是否全一样)
        int start = intervals[0][0], cur_end = intervals[0][1];
        for (int i = 1; i < intervals.size();++i){
            if(intervals[i][0]<=cur_end){
                cur_end = max(cur_end, intervals[i][1]);
            }else{
                res.push_back({start, cur_end});
                start = intervals[i][0];
                cur_end = intervals[i][1];
            }
        }
        //一直要保持警惕：最后一个结果，是否存入结果集中
        res.push_back({start, cur_end});
        return res;
    }
};
================================================
56. Merge Intervals
Given a collection of intervals, merge all overlapping intervals.

Example 1:

Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
