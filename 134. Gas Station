class Solution {
public:
    int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {
        int cur = 0, total = 0, start = 0;
        for (int i = 0; i < gas.size();++i){
            cur += (gas[i] - cost[i]);
            total += (gas[i] - cost[i]);
            if(cur<0){
                cur = 0;
                start = i + 1;
            }
        }
        if(total<0){
            return -1;
        }
        return start;
    }
};
class Solution {//双层遍历，会超市
public:
    int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {
        int n = gas.size();
        for (int i = 0; i <n;++i){
            int rest = gas[i] - cost[i];
            int next = (i + 1) % n;
            if (rest < 0)
            {
                continue;
            }
            while(rest>=0&&next!=i){
                rest += (gas[next] - cost[next]);
                next = (next + 1) % n;
                //要明白，假设某一次rest小于0，此时第二条语句
                //依然会执行，但其实汽车是去不了next的
            }
            if(rest>=0&&next==i){
                return i;
            }
            // while(rest>=0&&next!=i){
            //     rest += (gas[next] - cost[next]);
            //     if(rest>=0){
            //         next = (next + 1) % n;
            //     }
            // }
            // if(next==i){
            //     return i;
            // }
            //以上两种写法，都可以；关键在于逻辑要清晰，即rest大于
            //0，才意味着可以跳到next位置
        }
        return -1;
    }
};
================================================
eg：  1 2 3   4 5   6 7
从1开始遍历，到3的时候，sum为负数，此时新开始一段，从4开始到5结束，此时再次从6开始，一直到7都是正的
那么，从6开始必然就是一个解，我之前担心有可能从6开始，一直加到3的时候，燃料供不应求。
但是这是不可能的（假设最终的total大于等于0），  因为从6到7，sum肯定是正的，那么如果只是从7开始
其所储备的然后肯定会比从6开始的少，因此不可能为解。
134. Gas Station
There are N gas stations along a circular route, where the amount of gas at station i is gas[i].

You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station (i+1). You begin the journey with an empty tank at one of the gas stations.

Return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1.

Note:

If there exists a solution, it is guaranteed to be unique.
Both input arrays are non-empty and have the same length.
Each element in the input arrays is a non-negative integer.
Example 1:

Input: 
gas  = [1,2,3,4,5]
cost = [3,4,5,1,2]

Output: 3
