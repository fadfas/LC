class Solution {//dp数组初始化为n+1，也就是在末尾添加一个虚拟台阶，只考虑跳到这一级台阶，不用考虑跳过这一级；也就是说，如果到达了这一级虚拟台阶，题目中的问题，也就解决了。
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        if(n<2){
            return 0;
        }
        vector<int> dp(n+1, 0);
        for (int i = 2; i < n+1;++i){
            dp[i] = min(dp[i - 2] + cost[i - 2], dp[i - 1] + cost[i - 1]);
        }
        return dp[n];
    }
};
class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        if(n<2){
            return 0;
        }
        vector<int> dp(n, 0);
        for (int i = 2; i < n;++i){
            dp[i] = min(dp[i - 2] + cost[i - 2], dp[i - 1] + cost[i - 1]);
        }
        return min(dp[n - 2] + cost[n - 2], dp[n - 1] + cost[n - 1]);
    }
};
=====================================================================
746. Min Cost Climbing Stairs
You are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.
You can either start from the step with index 0, or the step with index 1.
Return the minimum cost to reach the top of the floor.
