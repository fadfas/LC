/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(head==nullptr){
            return head;
        }
        ListNode *pNewHead = nullptr;
        helper(head, pNewHead);
        return pNewHead;
    }

private:
    ListNode *helper(ListNode* pCur,ListNode *&pNewHead){
        if(pCur->next==nullptr){
            pNewHead = pCur;
            return pCur;
        }

        ListNode *pTail = helper(pCur->next, pNewHead);
        pTail->next = pCur;
        pCur->next = nullptr;//别忘了这个
        return pCur;
    }
};
 
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(!head)
            return nullptr;
        ListNode* pNewHead=nullptr;
        reverseList(head,pNewHead);
        return pNewHead;
    }
private:
    void reverseList(ListNode* pNode,ListNode*& pNewHead){
        if(!pNode->next){
            pNewHead=pNode;
            return;
        }
        reverseList(pNode->next,pNewHead);
        pNode->next->next=pNode;   
        pNode->next=nullptr;//如果没有这句话，那么当处理到最后的一个节点后，就会形成一个环，OJ检测的时候无法终止
    }
};

class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(head==nullptr){
            return nullptr;
        }
        if(head->next==nullptr){
            return head; //这种递归解法，和上面的递归解法，差别在于，返回新头结点方式的差别
        }//学习这两种在递归中，传递信息的方式
        
        ListNode* pNewHead=reverseList(head->next);
        head->next->next=head;
        head->next=nullptr;
        return pNewHead;
    }
};

ListNode* ReverseList(ListNode* pHead) {
	ListNode* pReverseListHead = nullptr;
	ListNode* pNode = pHead;
	ListNode* pPrevNode = nullptr;

	while (pNode!= nullptr) {
		
		ListNode* pNext = pNode->next;
		if (pNext == nullptr) {
			pReverseListHead = pNode;
		}
		pNode->next = pPrevNode;
		pPrevNode = pNode;
		pNode = pNext;
		
	}

	return pReverseListHead;
}
=====================================
206. Reverse Linked List
Reverse a singly linked list.

Example:

Input: 1->2->3->4->5->NULL
Output: 5->4->3->2->1->NULL
