class RandomizedSet {
public:
    /** Initialize your data structure here. */
    RandomizedSet() {
        loc=unordered_map<int,int>();
        nums={};
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    bool insert(int val) {
        if(loc.count(val)) return false;
        nums.push_back(val);
        loc[val]=nums.size()-1;//哈希表的插入，复杂度为O(1)
        return true;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    bool remove(int val) {
        if(loc.count(val)==0) return false;
        int location=loc[val];
        int last=nums.back();
        nums[location]=last;
        loc[last]=location;
        nums.pop_back();//vector有pop_back()函数，并且复杂度为O(1)
        loc.erase(val);//学习哈希表的erase()函数，其复杂度为O(1)
        return true;
    }
    
    /** Get a random element from the set. */
    int getRandom() {
        int ran=rand()%nums.size();
        return nums[ran];
    }
private:
    unordered_map<int,int> loc;
    vector<int> nums;
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet obj = new RandomizedSet();
 * bool param_1 = obj.insert(val);
 * bool param_2 = obj.remove(val);
 * int param_3 = obj.getRandom();
 */
 =========================================
 380. Insert Delete GetRandom O(1)
Design a data structure that supports all following operations in average O(1) time.

insert(val): Inserts an item val to the set if not already present.
remove(val): Removes an item val from the set if present.
getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.
