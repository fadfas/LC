class LRUCache {
public:
    LRUCache(int capacity) {
        size=capacity;
    }
    
    int get(int key) {
        auto it=um.find(key);
        if(it!=um.end()){
            int value=it->second->second;
            l.erase(um[key]);//不能erase(it)因为那个是unordered_map的iterator
            l.push_front({key,value});//还是插入头部吧，不要插入尾部，否则um[key]=--l.end();这样会超时的
            um[key]=l.begin();//另外，um[key]=l.rbegin();会报类型错误的，这个要注意
            return value;
        }
        return -1;
    }
    
    void put(int key, int value) {
        if(get(key)!=-1){
            um[key]->second=value;
            return;
        }
        if(l.size()==size){
            int del_key=l.back().first;
            l.pop_back();
            um.erase(del_key);
        }
        l.push_front({key,value});
        um[key]=l.begin();
    }
private:
    list<pair<int,int>> l;
    unordered_map<int,list<pair<int,int>>::iterator> um;//学习这种用法！！！
    int size;
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
 ==================================
 146. LRU Cache
Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

Follow up:
Could you do both operations in O(1) time complexity?

Example:

LRUCache cache = new LRUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
