
class Solution {//可以学习一下这种两次二分的解法，尤其是其中二分的应用，其实
public://主要边界主要就是试(例如为何第二次二分查找，所在行是上一次的right)
    bool searchMatrix(vector<vector<int> > &matrix, int target) {
        if (matrix.empty() || matrix[0].empty()) return false;
        if (target < matrix[0][0] || target > matrix.back().back()) return false;
        int left = 0, right = matrix.size() - 1;
        while (left <= right) {
            int mid = (left + right) / 2;
            if (matrix[mid][0] == target) return true;
            else if (matrix[mid][0] < target) left = mid + 1;
            else right = mid - 1;
        }
        int tmp = right;
        left = 0;
        right = matrix[tmp].size() - 1;
        while (left <= right) {
            int mid = (left + right) / 2;
            if (matrix[tmp][mid] == target) return true;
            else if (matrix[tmp][mid] < target) left = mid + 1;
            else right = mid - 1;
        }
        return false;
    }
};

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        if(matrix.empty()||matrix[0].empty())
            return false;
        int m=matrix.size(),n=matrix[0].size();
        if(target<matrix[0][0]||target>matrix[m-1][n-1])
            return false;
        int left=0,right=m*n-1;
        while(left<=right){
            int mid=left+((right-left)>>1);
            if(matrix[mid/n][mid%n]==target)
                return true;
            if(matrix[mid/n][mid%n]<target){
                left=mid+1;
            }else{
                right=mid-1;
            }
        }
        return false;
    }
};
=================================================
74. Search a 2D Matrix
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
Example 1:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
Output: true
