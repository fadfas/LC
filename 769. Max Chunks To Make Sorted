 public int maxChunksToSorted(int[] arr) {//更精简的方法
        if (arr == null || arr.length == 0) return 0;
        
        int count = 0, max = 0;
        for (int i = 0; i < arr.length; i++) {
            max = Math.max(max, arr[i]);
            if (max == i) {
                count++;
            }
        }
        
        return count;
    }

class Solution {//棒棒哒~
public:
    int maxChunksToSorted(vector<int>& arr) {
        unordered_map<int,int> mp;// val index
        for(int i=0;i<arr.size();++i){
            mp[arr[i]]=i;
        }
        int res=0;
        for(int i=0;i<arr.size();++i){
            int curRight=max(mp[i],arr[i]);
            while(i<curRight){
                ++i;
                curRight=max(curRight,max(mp[arr[i]],arr[i]));
            }
            ++res;
        }
        return res;
    }
};
=================================================
769. Max Chunks To Make Sorted
Given an array arr that is a permutation of [0, 1, ..., arr.length - 1], we split the array into some number of "chunks" (partitions), and individually sort each chunk.  After concatenating them, the result equals the sorted array.

What is the most number of chunks we could have made?

Example 1:

Input: arr = [4,3,2,1,0]
Output: 1
Explanation:
Splitting into two or more chunks will not return the required result.
For example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn't sorted.
Example 2:

Input: arr = [1,0,2,3,4]
Output: 4
Explanation:
We can split into two chunks, such as [1, 0], [2, 3, 4].
However, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible.
