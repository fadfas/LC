/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void recoverTree(TreeNode* root) {
        core(root);
        int tmp=first->val;
        first->val=second->val;
        second->val=tmp;
        
    }
private:
    TreeNode* first=nullptr, *second=nullptr;
    TreeNode* pPre=nullptr;
    void core(TreeNode* pNode){
        if(pNode==nullptr){
            return;
        }
        
        core(pNode->left);
        if(pPre){
            if(!first){
                if(pNode->val<pPre->val){
                    first=pPre;
                }
            }

            if(pNode->val<pPre->val){
                second=pNode;
            }
        }
        pPre=pNode;
        core(pNode->right);
    }
};
=====================================================================
99. Recover Binary Search Tree
You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.
