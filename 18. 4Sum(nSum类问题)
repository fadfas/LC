class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int> > res;
        if(nums.size()<4){//必须有，否则下面就会报错（见下面注释）
            return res;
        }
        sort(nums.begin(), nums.end());
        vector<int> cur;
        helper(nums, target, 4, res, cur, 0);
        return res;
    }
    void helper(vector<int>& nums,long long target,int n,vector<vector<int>> &res,vector<int> &cur,int start){
        if(n==2){
            int l = start, r = nums.size() - 1;
            while(l<r){
                long long l_n = nums[l], r_n = nums[r];
                if(l_n+r_n>target){
                    while(l<r&&nums[r]==r_n){
                        --r;
                    }
                }else if(l_n+r_n<target){
                    while(l<r&&nums[l]==l_n){
                        ++l;
                    }
                }else{
                    vector<int> tmp = cur;
                    tmp.push_back(l_n);
                    tmp.push_back(r_n);
                    res.push_back(tmp);
                    while (l < r && nums[l] == l_n)
                    {
                        ++l;
                    }
                    while(l<r&&nums[r]==r_n){
                        --r;
                    }
                }
            }
        }else{
            //nums.size()-n+1   如果nums只有一个元素，n等于4
            //这个语句执行后等于：18446744073709551614
            //因为nums.size()返回的是：vector<int>::size_type
            //其本质是一个unsigned int
            while(start<nums.size()-n+1){
                int start_n = nums[start];
                cur.push_back(start_n);
                helper(nums, target - start_n, n - 1, res, cur, start + 1);
                while(start<nums.size()-n+1 && nums[start]==start_n){
                    ++start;
                }
                cur.pop_back();
            }
        }
    }
};

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> res;
        if(nums.size()<4){
            return res;
        }
        sort(nums.begin(),nums.end());
        res=nSum(nums,target,4,0);
        return res;
    }
private:
    vector<vector<int>> nSum(vector<int>& nums,int target,int n,int start){  //任意nSum都可以解决
        vector<vector<int>> res;
        if(n==2){
            int low=start,high=nums.size()-1;
            while(low<high){
                int sum=nums[low]+nums[high];
                int left=nums[low],right=nums[high];
                if(sum<target){
                    while(low<high&&nums[low]==left) ++low;
                }else if(sum>target){
                    while(low<high&&nums[high]==right) --high;
                }else{
                    res.push_back({left,right});
                    while(low<high&&nums[low]==left) ++low;
                    while(low<high&&nums[high]==right) --high;
                }
            }
        }else{
            for(int i=start;i<nums.size();++i){
                int newTarget=target-nums[i];
                vector<vector<int>> tmp=nSum(nums,newTarget,n-1,i+1);
                for(vector<int> each:tmp){
                    each.push_back(nums[i]);
                    res.push_back(each);
                }
                while(i<nums.size()-1&&nums[i]==nums[i+1]) i++;
            }
        }
        return res;
    }
};
=====================================================================
18. 4Sum
Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:
0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.
