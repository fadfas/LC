class Solution {//在这道题中，如果只用long long，会溢出。那么，一种解决办法是，使用unsigned long long;或者对dp中间结果%INT_MAX(因为题目中说了，最终的结果不超过INT_MAX)
public:
    int numDistinct(string s, string t) {
        int m = s.size(), n = t.size();
        vector<vector<long long> > dp(m + 1, vector<long long>(n + 1, 0));
        for (int i = 0; i <= m;++i){
            dp[i][0] = 1;
        }
        for (int i = 1; i <= m;++i){
            for (int j = 1; j <= n;++j){
                if(s[i-1]==t[j-1]){
                    dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - 1])%INT_MAX;
                }else{
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        return dp.back().back();
    }
};
=====================================================================
115. Distinct Subsequences
Given two strings s and t, return the number of distinct subsequences of s which equals t.

A string's subsequence is a new string formed from the original string by deleting some (can be none) of the characters without disturbing the remaining characters' relative positions. (i.e., "ACE" is a subsequence of "ABCDE" while "AEC" is not).

The test cases are generated so that the answer fits on a 32-bit signed integer.
