class Solution {
public:
    int kEmptySlots(vector<int>& flowers, int k) {
        int n=flowers.size();
        int days[n]={0};
        for(int i=0;i<n;++i){
            days[flowers[i]-1]=i+1;//搞不清days的下标和其元素各自的含义？记住变量名代表查询出的各个元素的含义
            //例如days[2]=3,则3代表第三天花儿绽开
            //另外注意+1,-1因为下标的取值范围和实际生活的取值范围的不同
        }
        int res=INT_MAX;
        int left=0,right=k+1;
        for(int i=1;right<n;++i){//注意这个for循环的各个变量，不是++right  一般滑窗都是以右边界是否到达末端为
                                   //判断循环终止条件，说的就是：right<n
            if(days[i]>days[left]&&days[i]>days[right])
                continue;
            if(i==right)
                res=min(res,max(days[left],days[right]));
            left=i;
            right=left+k+1;
        }
        return res==INT_MAX?-1:res;
    }
};
==========================================
683. K Empty Slots
There is a garden with N slots. In each slot, there is a flower. The N flowers will bloom one by one in N days. In each day, there will be exactly one flower blooming and it will be in the status of blooming since then.

Given an array flowers consists of number from 1 to N. Each number in the array represents the place where the flower will open in that day.

For example, flowers[i] = x means that the unique flower that blooms at day i will be at position x, where i and x will be in the range from 1 to N.

Also given an integer k, you need to output in which day there exists two flowers in the status of blooming, and also the number of flowers between them is k and these flowers are not blooming.

If there isn't such day, output -1.
