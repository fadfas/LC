class Solution {
public:
    vector<string> wordBreak(string s, vector<string>& wordDict) {
        unordered_set<string> wordSet(wordDict.begin(),wordDict.end());
        unordered_map<string,vector<string>> memo;
        return dfs(s,wordSet,memo);
    }
private:
    vector<string> dfs(string s,unordered_set<string>& wordSet,unordered_map<string,vector<string>>& memo){
        if(memo.find(s)!=memo.end())
            return memo[s];//这个不是递归的终止，而是DP的记忆功能
        if(s.empty())
            return {""};//注意，如果当前匹配模式能够成功分割整句话，要返回{""}，而不是{}
        vector<string> sentences={};
        for(auto w:wordSet){
            if(s.size()>=w.size()&&s.substr(0,w.size())==w){
                vector<string> temp=dfs(s.substr(w.size()),wordSet,memo);//学习substr的一个参数时的用法
                                        //另外，这个参数意味着从这个参数下标开始截取字符串（即包含当前字符）
                for(auto t:temp){
                    sentences.push_back(w+(t.size()?" "+t:""));
                }
            }
        }
        memo[s]=sentences;
        return sentences;
    }
};
====================================================
140. Word Break II
Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences.

Note:

The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
