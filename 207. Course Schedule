class Solution {
public:
    bool canFinish(int numCourses, vector<pair<int, int>>& prerequisites) {
        vector<vector<int>> adj(numCourses,vector<int>());
        vector<int> inDegree(numCourses,0);
        int cnt=0;
        queue<int> q;
        for(auto &e:prerequisites){
            adj[e.second].push_back(e.first);
            ++inDegree[e.first];
        }
        for(int i=0;i<numCourses;++i){
            if(inDegree[i]==0){
                q.push(i);
            }
        }
        while(!q.empty()){
            int cur=q.front();
            q.pop();
            ++cnt;
            for(int adjV:adj[cur]){
                if(--inDegree[adjV]==0){
                    q.push(adjV);
                }
            }
        }
        return cnt==numCourses;
    }
};
=====================================================
https://www.geeksforgeeks.org/topological-sorting-indegree-based-solution/
207. Course Schedule
There are a total of n courses you have to take, labeled from 0 to n-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

Example 1:

Input: 2, [[1,0]] 
Output: true
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0. So it is possible.
