class Solution {
public:
    int countSubstrings(string s) {
        int n=s.size();
        vector<vector<int>> dp(n,vector<int>(n,0));//将dp[i][j]定义成子字符串[i, j]是否是回文串就行了
        int res=0;//学习这种看似问题是一维的，但是用一个二维的dp数组去记录不同的子问题的方法
        for(int i=n-1;i>=0;--i){
            for(int j=i;j<n;++j){
                dp[i][j]=(s[i]==s[j])&&(j-i<=2||dp[i+1][j-1]);
                if(dp[i][j]){
                    ++res;
                }
            }
        }
        return res;
    }
};
=====================================
647. Palindromic Substrings
Given a string, your task is to count how many palindromic substrings in this string.

The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.

Example 1:

Input: "abc"
Output: 3
Explanation: Three palindromic strings: "a", "b", "c".
