class Solution {
public:
    Node* connect(Node* root) {
        if(root==nullptr){
            return nullptr;
        }
        
        Node* curHead=root;
        while(curHead){
            Node* nextHead=nullptr,*prev=nullptr;
            for(Node *p=curHead;p!=nullptr;p=p->next){
                if(p->left){
                    helper(prev,nextHead,p->left);
                }
                if(p->right){
                    helper(prev,nextHead,p->right);
                }
            }
            curHead=nextHead;
        }
        return root;
        
    }
private://注意这个函数的形参，是指针的引用！！！是 *&  
    void helper(Node *&prev,Node *&nextHead,Node *cur){//对比下面的写法，这种抽象出一个函数的方法，更加优雅
        if(nextHead==nullptr){//学习这种，若某某为空，那么就代表第一次更新，此时可以赋值更新；否则，就说明之前已经更新过了，就不要再更新了。
            nextHead=cur;
        }
        if(prev!=nullptr){//学习这种，若某某不为空，则说明不是第一次了，那么此次就可以使用了
            prev->next=cur;
        }
        prev=cur;
    }
};
class Solution {
public:
    void connect(TreeLinkNode *root) {
        if(!root){
            return;
        }
        TreeLinkNode* pHead=root;
        TreeLinkNode* pCur=nullptr;
        TreeLinkNode* pPre=nullptr;
        while(pHead){ //学会寻找这种循环没有完成的代表性变量
            pCur=pHead;
            pHead=nullptr;
            pPre=nullptr;
            while(pCur){ //学会寻找这种循环没有完成的代表性变量
                if(pCur->left){
                    if(pPre){
                        pPre->next=pCur->left;
                    }else{
                        pHead=pCur->left;
                    }
                    pPre=pCur->left;
                }
                if(pCur->right){
                    if(pPre){
                        pPre->next=pCur->right;
                    }else{
                        pHead=pCur->right;
                    }
                    pPre=pCur->right;
                }
                pCur=pCur->next;
            }
        }
    }
};
=============================================================
117. Populating Next Right Pointers in Each Node II
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.
