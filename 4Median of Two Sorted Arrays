class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n1_length=nums1.size();
        int n2_length=nums2.size();
        
        if(n1_length==0&&n2_length==0){
            return -1;
        }
        
        if(n1_length<n2_length){// make sure nums2 is the shorter one
            return findMedianSortedArrays(nums2,nums1);
        }
        
        int lower_index=0;
        int higher_index=2*n2_length;
        while(lower_index<=higher_index){ //it should be <= !!!!
            int cut2=(lower_index+higher_index)/2;
            int cut1=n1_length+n2_length-cut2;
            
            int L1=(cut1==0)?0x80000000:nums1[(cut1-1)/2];
            int L2=(cut2==0)?0x80000000:nums2[(cut2-1)/2];
            int R1=(cut1==2*n1_length)?0x7fffffff:nums1[cut1/2];
            int R2=(cut2==2*n2_length)?0x7fffffff:nums2[cut2/2];
            
            if(L1>R2){
                lower_index=cut2+1;
            }else if(L2>R1){
                higher_index=cut2-1;
            }else{
                return (max(L1,L2)+min(R1,R2))/2.0;
            }
        }
        return -1;
    }
};
