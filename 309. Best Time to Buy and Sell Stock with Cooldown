class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<int> > dp(n, vector<int>(3, 0));
        //当天结束后，持有股票,累计最大收益
        //  人话讲： 手上一定要有股票， 要么买（只能在非冷静期买）， 要么昨天就持有
        
        //当天结束后，未持有股票，次日处于冷冻期,累计最大收益
        //  人话讲：手上一定没有股票， 且是今天刚刚卖（因为今天结束后才处于冷静期）

        //当天结束后，未持有股票，次日不是冷冻期,累计最大收益
        //  人话讲：手上一定没有股票，且不能是今天卖(因为今天冷静期必须结束)， 故而 要么之前就没有股票， 要么就是昨天就卖掉了

        dp[0][0] = -prices[0];
        // 1: 第一天持有，只有可能是买入
        dp[0][1] = 0;
        // 2. 第0天，相当于当天买入卖出，没有收益，并造成下一天冷冻期，减少选择。综合认为是负收益。因此设置为INT_MIN也行
        dp[0][2] = 0;
        // 3. 相当于没买入，收益自然为0
        for (int i = 1; i < n;++i){
            dp[i][0] = max(dp[i - 1][2]-prices[i],dp[i-1][0]);
            dp[i][1] = dp[i - 1][0] + prices[i];
            dp[i][2] = max(dp[i - 1][1], dp[i - 1][2]);
        }
        return max(dp[n - 1][1], dp[n - 1][2]);
    }
};
=====================================================================
309. Best Time to Buy and Sell Stock with Cooldown
You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:

After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).
Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).
