class Solution {
public:
    int characterReplacement(string s, int k) {
        int cnt[26]={0};
        int st=0,res=0,maxCnt=0;
        int n=s.size();
        for(int e=0;e<n;++e){
            maxCnt=max(maxCnt,++cnt[s[e]-'A']);
            while(e-st+1-maxCnt>k){
                --cnt[s[st]-'A'];
                ++st;
            }
            res=max(res,e-st+1);
        }
        return res;
    }
};
==========================================
424. Longest Repeating Character Replacement
Given a string that consists of only uppercase English letters, you can replace any letter in the string with another letter at most k times. Find the length of a longest substring containing all repeating letters you can get after performing the above operations.

Note:
Both the string's length and k will not exceed 104.

Example 1:

Input:
s = "ABAB", k = 2

Output:
4

Explanation:
Replace the two 'A's with two 'B's or vice versa.
