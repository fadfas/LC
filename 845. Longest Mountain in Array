class Solution {
public:
    int longestMountain(vector<int>& A) {
        int res=0;
        int i=0;
        while(i<(int)A.size()-1){//务必注意A.size()返回无符号整数，若长度为0，则减一后会变得灰常大
            while(i<A.size()-1&&A[i]==A[i+1]){
                ++i;
            }
            int up=0;
            while(i<A.size()-1&&A[i]<A[i+1]){
                ++up;
                ++i;
            }
            int down=0;
            while(i<A.size()-1&&A[i]>A[i+1]){
                ++down;
                ++i;
            }
            if(up&&down){
                res=max(res,down+up+1);
            }
        }
        return res;
    }
};
==============================================
845. Longest Mountain in Array
Let's call any (contiguous) subarray B (of A) a mountain if the following properties hold:

B.length >= 3
There exists some 0 < i < B.length - 1 such that B[0] < B[1] < ... B[i-1] < B[i] > B[i+1] > ... > B[B.length - 1]
(Note that B could be any subarray of A, including the entire array A.)

Given an array A of integers, return the length of the longest mountain. 

Return 0 if there is no mountain.

Example 1:

Input: [2,1,4,7,3,2,5]
Output: 5
Explanation: The largest mountain is [1,4,7,3,2] which has length 5.
