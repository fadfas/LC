class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int> > res;
        vector<int> cur;
        vector<bool> used(nums.size(), false);
        sort(nums.begin(), nums.end());
        backtrack(nums, res, cur,used);
        return res;
    }

private:
    void backtrack(vector<int> &nums,vector<vector<int>> &res,vector<int> &cur,vector<bool> &used){
        if(cur.size()==nums.size()){
            res.emplace_back(cur);
            return;
        }
        for (int i = 0; i < nums.size();++i){
            if(used[i]==true||(i>0&&nums[i]==nums[i-1]&&used[i-1]==false)){
                continue;//used[i-1]是精髓；
                //  0  1  2  3  4
                //  1  1  1  1  9
                //假设此时第一次调用递归函数，索引0被使用后，进入下一层递归
                //此时i指向索引1，但是索引1的值可以使用（此时used[0]==true)
                //但是，当索引1完成整个循环后，i指向索引2时，就不能再使用了（否则就出现重复排列的情况了）(此时used[1]==false,因为上一轮循环结束后，used[1]被还原为false了）
            }
            used[i] = true;
            cur.emplace_back(nums[i]);
            backtrack(nums, res, cur, used);
            used[i]=false;
            cur.pop_back();
        }
    }
};
===================================================
47. Permutations II
Given a collection of numbers that might contain duplicates, return all possible unique permutations.
此题有助于理解回溯算法。
另外中文版的leetcode的算法解释不错，还有时间复杂度如何计算的讲解。
