class Solution {
public:
    vector<vector<string>> partition(string s) {
        int n = s.size();
        vector<vector<bool> > dp(n, vector<bool>(n, false));
        vector<vector<string> > res;
        vector<string> cur;
        for (int i = 0; i < n; ++i)
        {
            dp[i][i] = true;
        }
        for (int i = n - 2; i >= 0;--i){
            for (int j = i + 1; j < n;++j){
                if(s[i]==s[j]){
                    dp[i][j] = j - i <= 2 ? true : dp[i + 1][j - 1]; // j - i <= 2 主意小于等于别忘了，不能仅小于
                }
            }
        }
        backtrack(s, n, 0, res, cur, dp);
        return res;
    }

private:
    void backtrack(string &s,int n,int start,vector<vector<string>> &res,vector<string> &cur,vector<vector<bool>> &dp){
        if(start==n){
            res.emplace_back(cur);
            return;
        }
        vector<bool> line = dp[start];
        for (int i = start; (i < n);++i){ //line[i]==true这个不要放到for循环第二个位置内进行判断，否则一旦遇到false，循环就终止了。但是原本是想遇到false跳过而已。
            if(line[i]==true){
            cur.emplace_back(s.substr(start, i - start + 1));
            backtrack(s, n, i + 1, res, cur, dp);
            cur.pop_back();
            }

        }
    }
};
====================================
131. Palindrome Partitioning
Given a string s, partition s such that every substring of the partition is a palindrome.

Return all possible palindrome partitioning of s.

Example:

Input: "aab"
Output:
[
  ["aa","b"],
  ["a","a","b"]
]
