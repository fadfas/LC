/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {//循环的方法
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode dummy(0);//dummyNode的应用！！！可以说应用场景非常广泛，基本上只要问题能够涉
                    //及到头结点，都可以使用dummy node
        ListNode* pNode=&dummy;
        
        while(l1&&l2){
            if(l1->val<l2->val){
                pNode->next=l1;
                l1=l1->next;
            }else{
                pNode->next=l2;
                l2=l2->next;
            }
            pNode=pNode->next;
        }
        pNode->next=l1?l1:l2;
        
        return dummy.next;  //注意dummy的声明方式不是指针！！！！所以要用.运算符
    }
};


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {  //递归的解法
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(!l1)
            return l2;
        if(!l2)
            return l1;
        ListNode* pNode=nullptr;
        if(l1->val<l2->val){
            pNode=l1;
            l1->next=mergeTwoLists(l1->next,l2);
        }else{
            pNode=l2;
            l2->next=mergeTwoLists(l1,l2->next);
        }
        return pNode;
    }
};
================================================
stack memory vs heap memory
In C++ the stack memory is where local variables get stored/constructed. The stack is also used to hold parameters passed to functions.

The stack is like a very like the std::stack class, you push parameters onto it and then call a function. The function then knows 
the parameters it expects can be found on the end of the stack. Likewise the function can push locals onto the stack and pop them off it 
before returning from the function. (caveat- compiler optimizations and calling conventions all mean things aren't this simple)

Heap memory is much as rskar says. Generally speaking in C++ objects allocated with new, or blocks of memory allocated with the likes
of malloc ends up on the heap. Heap memory almost always must be manually freed, though you should reallly use a smart pointer class or 
similar to avoid needing to remember to do so. Running out of heap memory can (will?) result in a std::bad_alloc.

因此第一个解法中的dummy使用完成后，不用delete掉

21. Merge Two Sorted Lists
Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.
