class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        quickSort(nums,0,nums.size()-1);
        return nums;
    }
private:
    void quickSort(vector<int>& nums,int l,int r){
        int pivortIdx=partation(nums,l,r);
        if(l<pivortIdx){
            quickSort(nums,l,pivortIdx-1);
        }
        if(r>pivortIdx){
            quickSort(nums,pivortIdx+1,r);
        }
    }
    int randomPivort(int l,int r){
        //使用randompivort，会降低以下测试用例的时间复杂度
        //[1,2,3,...,50000]
        //如果直接选用nums[r]作为pivort，会导致超时的问题
        return l+rand()%(r-l+1);
    }
    int partation(vector<int>& nums,int l,int r){
        if(l==r){
            return l;
        }
        int pivortIdx=randomPivort(l,r);
        swap(nums[r],nums[pivortIdx]);
        int pivort=nums[r];
        int loc=l-1;
        for(int i=l;i<r;++i){
            if(nums[i]<pivort){
                swap(nums[i],nums[++loc]);
            }
        }
        swap(nums[r],nums[++loc]);
        return loc;
    }
};
===========================================
912. Sort an Array
Given an array of integers nums, sort the array in ascending order.
（Quick Sort）
Example 1:
Input: nums = [5,2,3,1]
Output: [1,2,3,5]
Example 2:

Input: nums = [5,1,1,2,0,0]
Output: [0,0,1,1,2,5]

Constraints:
1 <= nums.length <= 5 * 104
-5 * 104 <= nums[i] <= 5 * 104
