class Solution { //动态规划经典问题，此解法为自底向上的解法，非递归方法
public:
    int numTrees(int n) {
        int* result=new int[n+1];
        result[0]=result[1]=1;
        for(int i=2;i<=n;++i){
            for(int j=0;j<=i-1;++j){
                result[i]+=result[j]*result[i-j-1];
            }
        }
        return result[n];
    }
};


class Solution {  //此解法为自上向下的解法，递归方法，同时使用了cache/memorization
public:
    int numTrees(int n) {
        if(n==0||n==1){
            return 1;
        }
        int* cache=new int[n+1];  
        memset(cache,0,sizeof(int)*(n+1));//对于int型数组，memset只能初始化为0或-1
        return numTreesRecursively(cache,1,n);
    }
private:
    int numTreesRecursively(int* cache,int start,int end){
        if(start>=end){//注意不能使start==end
            return 1;
        }
        if(cache[end-start]!=0){
            return cache[end-start];
        }
        int result=0;
        for(int i=start;i<=end;++i){ //i就代表以节点i为根
            result+=numTreesRecursively(cache,start,i-1)*numTreesRecursively(cache,i+1,end);
        }
        cache[end-start]=result; //别忘了对cache更新！！！
        return result;
    }
};
=================================================
96. Unique Binary Search Trees
Given n, how many structurally unique BST's (binary search trees) that store values 1 ... n?
