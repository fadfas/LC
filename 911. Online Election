class TopVotedCandidate {
public:
    TopVotedCandidate(vector<int> persons, vector<int> times) {
        int n=persons.size(),lead=-1;
        for(int i=0;i<n;++i){
            data[times[i]]=persons[i];
        }
        for(auto &e:data){
            if(++eachPerson[e.second]>=eachPerson[lead])//主要是大于等于，因为题目要求平局的时候，输出最近的那个人
                lead=e.second;
            e.second=lead;
            //上一行等价于data[e.first]=lead;
        }
    }
    
    int q(int t) {
        auto temp=data.upper_bound(t);//正确写法是upper_bound(),别写错了
        return (--temp)->second;//注意upper_bound返回的是迭代器，要用->街引用
    }
private:
    map<int, int> data;//times  person
    unordered_map<int,int> eachPerson;
};

/**
 * Your TopVotedCandidate object will be instantiated and called as such:
 * TopVotedCandidate obj = new TopVotedCandidate(persons, times);
 * int param_1 = obj.q(t);
 */
 ===========================================
 911. Online Election
In an election, the i-th vote was cast for persons[i] at time times[i].

Now, we would like to implement the following query function: TopVotedCandidate.q(int t) will return the number of the person that was leading the election at time t.  

Votes cast at time t will count towards our query.  In the case of a tie, the most recent vote (among tied candidates) wins.

 

Example 1:

Input: ["TopVotedCandidate","q","q","q","q","q","q"], [[[0,1,1,0,0,1,0],[0,5,10,15,20,25,30]],[3],[12],[25],[15],[24],[8]]
Output: [null,0,1,1,0,0,1]
Explanation: 
At time 3, the votes are [0], and 0 is leading.
At time 12, the votes are [0,1,1], and 1 is leading.
At time 25, the votes are [0,1,1,0,0,1], and 1 is leading (as ties go to the most recent vote.)
This continues for 3 more queries at time 15, 24, and 8.
