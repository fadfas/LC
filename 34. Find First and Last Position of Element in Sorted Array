class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        if(nums.empty()){
            return {-1, -1};
        }
        int left = 0, right = nums.size() - 1;
        while(left<=right){
            int mid = left + (right - left) / 2;
            if(nums[mid]>=target){
                right = mid - 1;
            }else{
                left = mid + 1;
            }
        }
        if(left==nums.size()||nums[left]!=target){ //left==nums.size() 先判断这个，否则第二个判断项先判断的话，可能越界了
            return {-1, -1};
        }
        for (right = left; right < nums.size();++right){
            if(nums[left]!=nums[right]){
                break;
            }
        }
        return {left, right - 1};
    }
};
==================================================
34. Find First and Last Position of Element in Sorted Array
Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].
