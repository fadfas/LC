class Solution {
public:
    bool isHappy(int n) {
       int fast=n,slow=n;
        while(true){
            fast=next(fast);
            fast=next(fast);
            slow=next(slow);
            if(fast==slow){
                break;
            }
        }
        return slow==1;
    }
private:
    int next(int n){
        int res=0;
        while(n){
            res+=(n%10)*(n%10);
            n/=10;
        }
        return res;
    }
};

class Solution {
public:
    bool isHappy(int n) {
        unordered_set<int> s;
        while(n!=1){//学习这种while break 已经最终return n==1的配合方法
            int temp=0;//即根据while终止和其内部break终止的两种不同状态，来决定最终的return内容
            while(n){
                temp+=(n%10)*(n%10);
                n/=10;
            }
            if(s.count(temp)){//学习这种while break 已经最终return n==1的配合方法
                break;
            }
            s.insert(temp);
            n=temp;
        }
        return n==1;//学习这种while break 已经最终return n==1的配合方法
    }
};
========================================================
参考链接：https://leetcode.cn/problems/happy-number/solution/kuai-le-shu-by-leetcode-solution/
202. Happy Number
Write an algorithm to determine if a number is "happy".
A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.
Input: 19
Output: true
Explanation: 
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1
