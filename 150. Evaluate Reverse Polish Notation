class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        stack<int> s;
        for(int i=0;i<tokens.size();++i){
            if(tokens[i] != "+" && tokens[i] != "-" && tokens[i] != "*" && tokens[i] != "/"){
                s.push(stoi(tokens[i]));
            }else{
                int temp=0;
                int num2=s.top();
                s.pop();
                int num1=s.top();
                s.pop();
                if(tokens[i]=="+"){
                    temp=num1+num2;
                }else if(tokens[i]=="-"){
                    temp=num1-num2;
                }else if(tokens[i]=="*"){
                    temp=num1*num2;
                }else if(tokens[i]=="/"){
                    temp=num1/num2;
                }
                s.push(temp);
            }
        }
        return s.top();
    }
};
====================================
150. Evaluate Reverse Polish Notation
Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, /. Each operand may be an integer or another expression.

Note:

Division between two integers should truncate toward zero.
The given RPN expression is always valid. That means the expression would always evaluate to a result and there won't be any divide by zero operation.
Example 1:

Input: ["2", "1", "+", "3", "*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9
