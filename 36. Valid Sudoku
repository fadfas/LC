class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        int row[9][9]={0},col[9][9]={0},box[9][9]={0}; //学习这种数组的初始化方式
        for(int i=0;i<board.size();++i){
            for(int j=0;j<board[i].size();++j){
                if(board[i][j]!='.'){
                    int num=board[i][j]-'0';
                    int indexOfNum=num-1;
                    int indexOfBox=(i/3)*3+j/3; //判断在那个box的关键！！！
                    if(row[i][indexOfNum]||col[j][indexOfNum]||box[indexOfBox][indexOfNum]){
                        return false;
                    }
                    ++row[i][indexOfNum],++col[j][indexOfNum],++box[indexOfBox][indexOfNum];
                }
            }
        }
        return true;
    }
};
==============================================
36. Valid Sudoku
Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.
