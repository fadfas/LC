class Solution {
public:
    Node* copyRandomList(Node* head) {
        Node *pCur = head;
        unordered_map<Node *, Node *> um;
        while(pCur){
            Node *pNew = new Node(pCur->val);
            um[pCur] = pNew;
            pCur = pCur->next;
        }
        pCur = head;
        while(pCur){
            um[pCur]->next = um[pCur->next];
            um[pCur]->random = um[pCur->random];
            pCur = pCur->next;
        }
        return um[head];
    }
};
==============================================
138. Copy List with Random Pointer
A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.

Return a deep copy of the list.
