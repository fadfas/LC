class Solution {
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<int>> solutions;
        vector<int> queens;
        unordered_set<int> col,lr,rl;
        backtrack(solutions,queens,n,0,col,lr,rl);
        return generate(solutions,n);
    }
private:
    void backtrack(vector<vector<int>>& solutions,vector<int>& queens,int n,int line,unordered_set<int>& col,unordered_set<int>& lr,unordered_set<int>& rl){
        if(line==n){
            solutions.push_back(queens);
            return;
        }
        for(int i=0;i<n;++i){
            if(col.find(i)!=col.end()){
                continue;
            }
            int diagonal1=line-i;
            if(lr.find(diagonal1)!=lr.end()){
                continue;
            }
            int diagonal2=line+i;
            if(rl.find(diagonal2)!=rl.end()){
                continue;
            }
            queens.push_back(i);
            col.insert(i);
            lr.insert(diagonal1);
            rl.insert(diagonal2);
            backtrack(solutions,queens,n,line+1,col,lr,rl);
            queens.pop_back();
            col.erase(i);
            lr.erase(diagonal1);
            rl.erase(diagonal2);
        }
    }
    vector<vector<string>> generate(vector<vector<int>>& solutions,int n){
        vector<vector<string>> res;
       
        for(vector<int>& sol:solutions){
            vector<string> one;
            for(int i:sol){
                string tmp(n,'.');
                tmp[i]='Q';
                one.push_back(tmp);
            }
            res.push_back(one);
        }
        return res;
    }
};
class Solution {
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<int>> solutions;
        vector<int> queens;
        
        backtrack(solutions,queens,n,0,0,0,0);
        return generate(solutions,n);
    }
private:
    void backtrack(vector<vector<int>>& solutions,vector<int>& queens,int n,int line,int col,int lr,int rl){
        if(line==n){
            solutions.push_back(queens);
            return;
        }
        int avail=((1<<n)-1)&(~(col|lr|rl));//哪一位是1，代表这一列，现在可以放棋子
        while(avail){
            int pos=avail&(-avail);//标识出最低位1，其他的都置0
            avail=avail&(avail-1);//删掉最低位的1
            int i=__builtin_ctz(pos);//计算出最低位1在第几位（即1后面几个0）
            queens.push_back(i);
            backtrack(solutions,queens,n,line+1,col|pos,(lr|pos)<<1,(rl|pos)>>1);
            queens.pop_back();
        }
    }
    vector<vector<string>> generate(vector<vector<int>>& solutions,int n){
        vector<vector<string>> res;
       
        for(vector<int>& sol:solutions){
            vector<string> one;
            for(int i:sol){
                string tmp(n,'.');
                tmp[i]='Q';
                one.push_back(tmp);
            }
            res.push_back(one);
        }
        return res;
    }
};
=====================================================================
51. N-Queens
The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.
