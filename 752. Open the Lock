class Solution {
public:
    int openLock(vector<string>& deadends, string target) {
        if(target=="0000"){
            return 0;
        }
        unordered_set<string> forbid;
        for(string each: deadends){
            forbid.insert(each);
        }
        if(forbid.count(target)||forbid.count("0000")){
            return -1;
        }
        queue<string> q;//一定要搞清楚、明确清楚，queue里面的元素
        //就只差生成新的密码这一步了（判断是否target、是否判断已访问
        //是否插入已访问，都完成了）
        //否则就会像openLock1函数那样，写的有点儿乱（不知道哪里需要
        //判断已访问、哪里需要插入已访问）
        q.push("0000");
        forbid.insert("0000");
        int res = 0;
        while(!q.empty()){
            int cnt = q.size();
            ++res;
            for (int i = 0; i < cnt;++i){
                string cur = q.front();
                q.pop();
                for (int i = 0; i < 4; ++i)
                {
                    string tmp = up(cur, i);
                    if(tmp==target){
                        return res;
                    }
                    if(forbid.count(tmp)==0){
                        q.push(tmp);
                        forbid.insert(tmp);
                    }
                    tmp = down(cur, i);
                    if(tmp==target){
                        return res;
                    }
                    if(forbid.count(tmp)==0){
                        q.push(tmp);
                        forbid.insert(tmp);
                    }
                }
            }
        }
        return -1;
    }
    int openLock1(vector<string>& deadends, string target) {
        unordered_set<string> forbid;
        for(string each: deadends){
            forbid.insert(each);
        }
        if(forbid.count(target)||forbid.count("0000")){
            return -1;
        }
        queue<string> q;
        q.push("0000");
        int res = 0;
        while(!q.empty()){
            int cnt = q.size();
            for (int i = 0; i < cnt;++i){
                string cur = q.front();
                q.pop();
                if(cur==target){
                    return res;
                }
                // if(forbid.count(cur)){
                //     continue;
                // }
                forbid.insert(cur);
                for (int i = 0; i < 4; ++i)
                {
                    string tmp = up(cur, i);
                    if(forbid.count(tmp)==0){
                        q.push(tmp);
                        forbid.insert(tmp);
                    }
                    tmp = down(cur, i);
                    if(forbid.count(tmp)==0){
                        q.push(tmp);
                        forbid.insert(tmp);
                    }
                }
            }
            ++res;
        }
        return -1;
    }
    string up(string s,int idx){
        if(s[idx]=='9'){
            s[idx] = '0';
        }else{
            s[idx] = s[idx] + 1;
        }
        return s;
    }
    string down(string s,int idx){
        if(s[idx]=='0'){
            s[idx] = '9';
        }else{
            s[idx] = s[idx] - 1;
        }
        return s;
    }
};

class Solution {
public:
    int openLock(vector<string>& deadends, string target) {
        unordered_set<string> s,e;
        unordered_set<string> stop;
        for(string e:deadends){
            stop.insert(e);
        }
        if(stop.find("0000")!=stop.end()||stop.find(target)!=stop.end()){
            return -1;
        }
        s.insert("0000");
        e.insert(target);
        int step=0;
        while(!s.empty()&&!e.empty()){
            unordered_set<string> tmp;
            for(string each:s){
                if(e.find(each)!=e.end()){
                    return step;
                }
                stop.insert(each);
                for(int i=0;i<4;++i){
                    string each_up=up(each,i);
                    if(stop.find(each_up)==stop.end()){
                        tmp.insert(each_up);
                    }
                    string each_down=down(each,i);
                    if(stop.find(each_down)==stop.end()){
                        tmp.insert(each_down);
                    }
                    // string each_up=up(each,i);
                    // if(stop.find(each_up)!=stop.end()){
                    //     continue;  //这样continue之后，each_down可能是合法的，但是也跳过了
                    // }
                    // tmp.insert(each_up);
                    // string each_down=down(each,i);
                    // if(stop.find(each_down)!=stop.end()){
                    //     continue;
                    // }
                    // tmp.insert(each_down);
                }
                
            }
            ++step;
            if(e.size()<tmp.size()){
                s=e;
                e=tmp;
            }else{
                s=tmp;
            }
            
        }
        return -1;
    }
private:
    string up(string s,int i){
        if(s[i]=='9'){
            s[i]='0';
            return s;
        }
        s[i]=s[i]+1;
        return s;
    }
    string down(string s,int i){
    if(s[i]=='0'){
        s[i]='9';
        return s;
    }
    s[i]=s[i]-1;
    return s;
    }
};
=====================================================================
752. Open the Lock
You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'. The wheels can rotate freely and wrap around: for example we can turn '9' to be '0', or '0' to be '9'. Each move consists of turning one wheel one slot.

The lock initially starts at '0000', a string representing the state of the 4 wheels.

You are given a list of deadends dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.

Given a target representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.
