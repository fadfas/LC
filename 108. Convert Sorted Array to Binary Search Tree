class Solution {//迭代法！
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        if(nums.empty()){
            return nullptr;
        }
        queue<TreeNode*> q;
        queue<int> left;
        queue<int> right;
        TreeNode* root=new TreeNode(0);
        q.push(root);
        left.push(0);
        right.push(nums.size()-1);
        while(!q.empty()){
            TreeNode* cur=q.front();q.pop();
            int l=left.front();left.pop();
            int r=right.front();right.pop();
            int mid=l+(r-l)/2;
            cur->val=nums[mid];
            if(l<=mid-1){
                cur->left=new TreeNode(0);//这一步，别忘了
                q.push(cur->left);
                left.push(l);
                right.push(mid-1);
            }
            if(mid+1<=r){
                cur->right=new TreeNode(0);
                q.push(cur->right);
                left.push(mid+1);
                right.push(r);
            }
        }
        return root;
    }
};
class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        if(nums.empty()){
            return nullptr;
        }
        return sortedArrayToBSTCore(nums,0,nums.size()-1);
    }
private:
    TreeNode* sortedArrayToBSTCore(vector<int>& nums,int start,int end){
        if(start>end){
            return nullptr;
        }
        int mid=start+((end-start)>>1);
        TreeNode* pNode=new TreeNode(nums[mid]);
        pNode->left=sortedArrayToBSTCore(nums,start,mid-1);
        pNode->right=sortedArrayToBSTCore(nums,mid+1,end);
        return pNode;
    }
};
===================================================
108. Convert Sorted Array to Binary Search Tree
Given an array where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.
