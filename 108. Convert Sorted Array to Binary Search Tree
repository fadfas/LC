/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        if(nums.empty()){
            return nullptr;
        }
        return sortedArrayToBSTCore(nums,0,nums.size()-1);
    }
private:
    TreeNode* sortedArrayToBSTCore(vector<int>& nums,int start,int end){
        if(start>end){
            return nullptr;
        }
        int mid=start+((end-start)>>1);
        TreeNode* pNode=new TreeNode(nums[mid]);
        pNode->left=sortedArrayToBSTCore(nums,start,mid-1);
        pNode->right=sortedArrayToBSTCore(nums,mid+1,end);
        return pNode;
    }
};
===================================================
108. Convert Sorted Array to Binary Search Tree
Given an array where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.
