class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> result={};
        if(nums.empty()){
            return result;
        }
        permuteRecursively(nums,result,0);
        return result;
    }
private:
    void permuteRecursively(vector<int>& nums,
                            vector<vector<int>>& result,
                            int start
                           ){
        if(start==nums.size()){
            result.push_back(nums);
            return;
        }
        for(int i=start;i<nums.size();++i){
            swap(nums[i],nums[start]);
            permuteRecursively(nums,result,start+1);
            swap(nums[i],nums[start]);
        }
    }
};
=========================================================
46. Permutations
Given a collection of distinct integers, return all possible permutations.
