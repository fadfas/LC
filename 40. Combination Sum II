class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> res;
        vector<int> tmp;
        sort(candidates.begin(), candidates.end());
        backtrack(res, tmp, candidates, target, 0);
        return res;
    }

private:
    void backtrack(vector<vector<int>> &res,vector<int> tmp,vector<int> &candidates,int target,int start){
        if(target==0){
            res.push_back(tmp);
            return;
        }
        if(target<0){
            return;
        }
        for (int i = start; i < candidates.size();++i){
            if(i!=start && candidates[i-1]==candidates[i]){// 不是if(i!=0
                continue;
            }
            tmp.push_back(candidates[i]);
            backtrack(res, tmp, candidates, target - candidates[i], i + 1);
            tmp.pop_back();
        }
    }
};
=================================================
40. Combination Sum II
Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

Each number in candidates may only be used once in the combination.
