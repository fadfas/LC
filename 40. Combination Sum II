class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> result={};
        vector<int> temp={};
        sort(candidates.begin(),candidates.end());
        if(candidates.empty()){
            return result;
        }
        combinationSum2Recursively(candidates,target,result,temp,0);
        return result;
        
    }
private:
    void combinationSum2Recursively(vector<int>& candidates,
                                    int target,
                                    vector<vector<int>>& result,
                                    vector<int>& temp,
                                    int start
                                   ){
        if(target==0){
            result.push_back(temp);
            return;
        }
        for(int i=start;i<candidates.size()&&target>0;++i){
            if(i==start||candidates[i]!=candidates[i-1]){  //另一种写法：if(i&&num[i]==num[i-1]&&i>start) 
                                                           //continue; 注意，只要有用到i-1下标的情形，务必判断i>0
                temp.push_back(candidates[i]);
                combinationSum2Recursively(candidates,target-candidates[i],result,temp,i+1);
                temp.pop_back();
            }
        }
    }
};
=================================================
40. Combination Sum II
Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

Each number in candidates may only be used once in the combination.
