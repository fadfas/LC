class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        if(s.size()==0){
            return 0;
        }
        int* index=new int[256];
        for(int i=0;i<256;++i){
            index[i]=-1;
        }
        int maxLength=0x80000000;
        int cur=0;
        for(int i=0;i<s.size();++i){
            int preIndex=index[s[i]];  //不用写成index[s[i]-'a']
            if(preIndex==-1||cur<(i-preIndex)){
                ++cur;
            }else if(cur>=(i-preIndex)){
                maxLength=max(maxLength,cur);//下一句在舍弃掉旧的cur值前，一定要别忘了判断是否需要留存！！！
                cur=i-preIndex;
            }
            index[s[i]]=i;

        }
        if(cur>maxLength){
            maxLength=cur;
        }
        return maxLength;
    }
};
============================================
3. Longest Substring Without Repeating Characters
Given a string, find the length of the longest substring without repeating characters.
