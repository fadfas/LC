/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> result;
        if(!root){
            return result;
        }
        queue<TreeNode*> nodesQueue;
        vector<int> curVec={};
        nodesQueue.push(root);
        nodesQueue.push(nullptr);
        while(!nodesQueue.empty()){
            TreeNode* pNode=nodesQueue.front();  //queue的front()函数
            nodesQueue.pop();
            if(pNode){
                curVec.push_back(pNode->val);
                if(pNode->left)
                    nodesQueue.push(pNode->left);
                if(pNode->right)
                    nodesQueue.push(pNode->right);
            }else{
                
                result.push_back(curVec);//这行得在下面的if语句前执行，要不最后一行数据会被丢弃
                curVec.clear();  //学会使用clear()函数,请空前务必确认数据是否需要输出
                if(nodesQueue.empty()){
                    break;//跳出循环也是，跳出前确认数据是否需要输出
                }
                nodesQueue.push(nullptr);
                
            }
        }
        return result;
    }
};
====================================
102. Binary Tree Level Order Traversal
Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).
