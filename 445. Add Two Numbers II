/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {//学习如何倒着构建链表！！！！！
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        stack<int> s1,s2;
        ListNode* pLatter=new ListNode(0);
        int sum=0;
        for(ListNode* p1=l1;p1;p1=p1->next)
            s1.push(p1->val);
        for(ListNode* p2=l2;p2;p2=p2->next)
            s2.push(p2->val);
        while(!s1.empty()||!s2.empty()){
            if(!s1.empty()){
                sum+=s1.top();
                s1.pop();
            }
            if(!s2.empty()){
                sum+=s2.top();
                s2.pop();
            }
            pLatter->val=sum%10;
            ListNode* pHead=new ListNode(sum/=10);
            pHead->next=pLatter;
            pLatter=pHead;
        }
        return pLatter->val?pLatter:pLatter->next;
    }
};
======================================
445. Add Two Numbers II
You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Follow up:
What if you cannot modify the input lists? In other words, reversing the lists is not allowed.
