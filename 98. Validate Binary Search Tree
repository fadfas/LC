/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {  //循环的方法！！
public:
    bool isValidBST(TreeNode* root) {
        //if(root==nullptr){  空树也是一个二叉搜索树！！
        //    return true;
        //}
        TreeNode* pCurrent=root;
        TreeNode* pPre=nullptr;
        stack<TreeNode*> nodeStack;
        while(pCurrent||!nodeStack.empty()){
            if(pCurrent){
                nodeStack.push(pCurrent);
                pCurrent=pCurrent->left;
            }else{
                pCurrent=nodeStack.top();
                nodeStack.pop();
                if(pPre!=nullptr&&(pCurrent->val<=pPre->val)){
                    return false;
                }
                pPre=pCurrent;
                pCurrent=pCurrent->right;
            }
        }
        return true;
    }
};

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isValidBST(TreeNode* root) {
        return helper(root,LONG_MIN,LONG_MAX);
    }
private:
    bool helper(TreeNode* pNode,long long min,long long max){
        if(pNode==nullptr){
            return true;
        }
        if(pNode->val<=min || pNode->val>=max){
            return false;
        }
        return helper(pNode->left,min,pNode->val) && helper(pNode->right,pNode->val,max);
    }
};
=================================================
98. Validate Binary Search Tree
Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
