class Solution {//用的是Manacher 算法，复杂度为O(N)
public:
    string longestPalindrome(string s) {
        if(s.size()<2){
            return s;
        }
        string processedStr="$#";
        for(int i=0;i<s.size();++i){
            processedStr+=s[i];
            processedStr+='#';
        }
        //processedStr+='\0';  字符串不用手工加\0
        int p[processedStr.size()]={0};
        int rightMost=0,middle=0;
        int maxRadius=0,maxMidIndex=0;
        for(int i=1;i<processedStr.size();++i){
            if(i<rightMost){
                p[i]=min(p[2*middle-i],rightMost-i);
            }else{
                p[i]=1;
            }
            while(processedStr[i-p[i]]==processedStr[i+p[i]])
                //(processedStr[i - p[i] - 1] == processedStr[i + p[i] + 1])不要加一减一，那样就越界了
                ++p[i];
            if(i+p[i]>rightMost){
                rightMost=i+p[i];
                middle=i;
            }
            if(p[i]>maxRadius){
                maxRadius=p[i];
                maxMidIndex=i;
            }
        }
        return s.substr((maxMidIndex-maxRadius)/2,maxRadius-1);
    }
};
=============================================
主要参考：https://subetter.com/algorithm/manacher-algorithm.html
次要参考：https://www.cnblogs.com/grandyang/p/4475985.html
5. Longest Palindromic Substring
Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.
