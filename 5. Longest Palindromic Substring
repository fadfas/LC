class Solution {//用的是Manacher 算法，复杂度为O(N)
public:
    string longestPalindrome(string s) {
        if(s.size()<2){
            return s;
        }
        string processedStr="$#";
        for(int i=0;i<s.size();++i){
            processedStr+=s[i];
            processedStr+='#';
        }
        //processedStr+='\0';  字符串不用手工加\0
        int p[processedStr.size()]={0};
        int rightMost=0,middle=0;
        int maxRadius=0,maxMidIndex=0;
        for(int i=1;i<processedStr.size();++i){
            if(i<rightMost){
                p[i]=min(p[2*middle-i],rightMost-i);
            }else{
                p[i]=1;
            }
            while(processedStr[i-p[i]]==processedStr[i+p[i]])
                //(processedStr[i - p[i] - 1] == processedStr[i + p[i] + 1])不要加一减一，那样就越界了
                ++p[i];
            if(i+p[i]>rightMost){
                rightMost=i+p[i];
                middle=i;
            }
            if(p[i]>maxRadius){
                maxRadius=p[i];
                maxMidIndex=i;
            }
        }
        return s.substr((maxMidIndex-maxRadius)/2,maxRadius-1);
    }
};
class Solution { //双指针解法，空间复杂度比dp好
public:
    string longestPalindrome(string s) {
        string res="";
        for(int i=0;i<s.size();++i){
            string tmp=find(s,i,i);
            res=res.size()<tmp.size()?tmp:res;
            tmp=find(s,i,i+1);
            res=res.size()<tmp.size()?tmp:res;
        }
        return res;
    }
private:
    string find(string& s,int l,int r){
        while(l>=0&&r<s.size()&&s[l]==s[r]){
            l--,r++;
        }
        return s.substr(l+1,r-l-1);//注意l,r所指向的位置，是不符合while循环条件后，退出来的位置。
    }
};
class Solution {
public:
    string longestPalindrome(string s) {
        vector<vector<bool> > dp(s.size(), vector<bool>(s.size(),false));
        for (int i = 0; i < s.size();++i){
            dp[i][i] = true;
        }
        string res = s.substr(0,1);
        for (int i = s.size() - 2; i >= 0; --i)
        {
            for (int j = i + 1; j < s.size();++j){
                if(s[i]==s[j]){
                    dp[i][j] = j-i+1>=3?dp[i + 1][j - 1]:true;
                }else{
                    dp[i][j] = false;
                }
                if(dp[i][j]){
                    if(j-i+1>res.size()){
                        res = s.substr(i, j-i + 1);
                    }
                }
            }
        }
        return res;
    }
};
=============================================
主要参考：https://subetter.com/algorithm/manacher-algorithm.html
次要参考：https://www.cnblogs.com/grandyang/p/4475985.html
5. Longest Palindromic Substring
Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.
