class Solution {
public:
    vector<int> countBits(int num) {
        vector<int> result(num+1,0);
        for(int i=1;i<=num;++i){
            result[i]=result[i&(i-1)]+1;  //i&(i-1)则去掉了i的最右面一个1
        }
        return result;
    }
};

class Solution {  //我的解法，规律见下方
public:
    vector<int> countBits(int num) {
        vector<int> result(num+1,0);
        result[0]=0;
        if(num<1)
            return result;
        int index=1;
        int power=0;
        while(true){
            int times=pow(2,power);
            for(int i=0;i<times;++i){
                result[index++]=result[i]+1;
                if(num+1==index)
                    return result;
            }
            ++power;
        }
        return {};
    }
};
==========================================
0  0000 0

1  0001 1

2  0010 1
3  0011 2

4  0100 1
5  0101 2
6  0110 2
7  0111 3

8  1000 1
9  1001 2
10 1010 2
11 1011 3
12 1100 2
13 1101 3
14 1110 3
15 1111 4

16 10000 1

338. Counting Bits
Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1's in their binary
representation and return them as an array.
