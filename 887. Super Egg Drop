class Solution {
public:
    int superEggDrop(int k, int n) {
        memo = vector<vector<int>>(k+1, vector<int>(n+1, -1));
        return dp_3(k, n);
    }

private:
    vector<vector<int> > memo;
    int dp_1(int k, int n)
    {
        if(k==1){
            return n;
        }
        if(n==0||n==1){ //不能只n==1，因为可能从n==2后直接调用n==0
            return n;
        }
        if(memo[k][n]!=-1){
            return memo[k][n];
        }
        int res = INT_MAX;
        for (int i = 1; i <= n; ++i)
        {
            res=min(res,max(dp_1(k-1,i-1),dp_1(k,n-i))+1);
        }
        memo[k][n] = res;
        return res;
    }
    int dp_2(int k, int n)
    {
        if(k==1){
            return n;
        }
        if(n==0||n==1){ //不能只n==1，因为可能从n==2后直接调用n==0
            return n;
        }
        if(memo[k][n]!=-1){
            return memo[k][n];
        }
        int res = INT_MAX;
        // for (int i = 1; i <= n; ++i)
        // {
        //     res=min(res,max(dp(k-1,i-1),dp(k,n-i))+1);
        // }
        int l = 1, r = n;
        while(l<=r){
            int mid = (l + r) / 2;
            if(dp_2(k-1,mid-1)>dp_2(k,n-mid)){
                r = mid - 1;
                res = min(res, dp_2(k - 1, mid - 1) + 1);
            }else{
                l = mid + 1;
                res = min(res, dp_2(k, n - mid) + 1);
            }
        }
        memo[k][n] = res;
        return res;
    }
    int dp_3(int k,int n){
        vector<vector<int> > dp(k + 1, vector<int>(n + 1, INT_MAX));
        for (int j = 0; j < n + 1;++j){
            dp[0][j] = 0;
            dp[1][j] = j;
        }
        for (int i = 2; i < k + 1;++i){
            dp[i][0] = 0;
            dp[i][1] = 1;
        }
        for (int i = 2; i < k + 1;++i){
            for (int j = 2; j < n + 1;++j){
                int l = 1, r = j;
                while(l<=r){
                    int mid = (l + r) / 2;
                    if(dp[i-1][mid-1]>dp[i][j-mid]){
                        r = mid - 1;
                        dp[i][j] = min(dp[i][j], dp[i - 1][mid - 1]+1);
                    }else{
                        l = mid + 1;
                        dp[i][j] = min(dp[i][j], dp[i][j - mid]+1);
                    }
                }
            }
        }
        return dp[k][n];
    }
};
=====================================================================
887. Super Egg Drop
https://leetcode.com/problems/super-egg-drop/discuss/792736/CPP-Explained-Recursive-greatermemoization-greateroptimization-greaterDP-oror-Well-Explained-oror-Easy-to-unserstand
You are given k identical eggs and you have access to a building with n floors labeled from 1 to n.

You know that there exists a floor f where 0 <= f <= n such that any egg dropped at a floor higher than f will break, and any egg dropped at or below floor f will not break.

Each move, you may take an unbroken egg and drop it from any floor x (where 1 <= x <= n). If the egg breaks, you can no longer use it. However, if the egg does not break, you may reuse it in future moves.

Return the minimum number of moves that you need to determine with certainty what the value of f is.
