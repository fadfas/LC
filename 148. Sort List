/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if(!head||!head->next)
            return head;
        ListNode* pPre=nullptr,*pSlow=head,*pFast=head;
        while(pFast&&pFast->next){//学习怎样找一个链表的中点并拆分！！！
            pPre=pSlow;
            pSlow=pSlow->next;
            pFast=pFast->next->next;
        }
        pPre->next=nullptr;
        return merge(sortList(head),sortList(pSlow));//注意这个地方还要调用sortList自己进行递归
    }
private:
    ListNode* merge(ListNode* p1,ListNode* p2){
        if(!p1)
            return p2;
        if(!p2)
            return p1;
        if(p1->val>p2->val){
            p2->next=merge(p1,p2->next);
            return p2;
        }else{
            p1->next=merge(p1->next,p2);
            return p1;
        }
    }
};
===============================================
常见排序方法有很多，插入排序，选择排序，堆排序，快速排序，冒泡排序，归并排序，桶排序等等。。它们的时间复杂度不尽相同，而这里题目限定了时间必须为O(nlgn)，符合要求只有快速排序，归并排序，堆排序，而根据单链表的特点，最适于用归并排序。
148. Sort List
Sort a linked list in O(n log n) time using constant space complexity.

Example 1:

Input: 4->2->1->3
Output: 1->2->3->4
Example 2:

Input: -1->5->3->4->0
Output: -1->0->3->4->5
