class Solution {
    vector<int> dx={0,0,-1,1};
    vector<int> dy={1,-1,0,0};
public:
    void solve(vector<vector<char>>& board) {
        int m=board.size();
        if(m==0){
            return;
        }
        int n=board[0].size();
        for(int i=0;i<m;++i){
            for(int j=0;j<n;++j){
                if((i==0||i==m-1||j==0||j==n-1)&&board[i][j]=='O'){
                    dfs(board,i,j);
                }
            }
        }
        for(int i=0;i<m;++i){
            for(int j=0;j<n;++j){
                if(board[i][j]=='O')
                    board[i][j]='X';
                if(board[i][j]=='$')
                    board[i][j]='O';
            }
        }
    }
    void dfs(vector<vector<char>>& board,int x,int y){
        int m=board.size();
        int n=board[0].size();
        board[x][y]='$';
        for(int i=0;i<4;++i){
            int newX=x+dx[i];
            int newY=y+dy[i];
            if(newX>0&&newX<m&&newY>0&&newY<n&&board[newX][newY]=='O'){
                dfs(board,newX,newY);
            }
        }
    }
};


class UF{//并查集还是定义一个类吧，这样用的方便，也更加的规范，也最好定义一下析构函数
public:
    UF(int size){
        cnt=size;
        rank=vector<int>(size,1);
        u=vector<int>(size,0);
        for(int i=0;i<size;++i){
            u[i]=i;
        }
    }
    ~UF(){
        
    }
    void connect(int a,int b){
        int parentA=find(a);
        int parentB=find(b);
        if(parentA==parentB){
            return;
        }
        if(rank[parentA]<rank[parentB]){//小树接大树上面
            u[parentA]=parentB;
            rank[parentB]+=rank[parentA];
        }else{
            u[parentB]=parentA;
            rank[parentA]+=rank[parentB];
        }
        --cnt;//别忘了合并后，count要减一
    }
    int find(int a){
        while(u[a]!=a){
            int parent=u[a];
            u[a]=u[parent];//路径压缩
            a=u[a];
        }
        return a;
    }
    bool isConnected(int a,int b){
        int parentA=find(a);
        int parentB=find(b);
        return parentA==parentB;
    }
private:
    int cnt;
    vector<int> rank;
    vector<int> u;
};

class Solution {
public:
    void solve(vector<vector<char>>& board) {
        int m=board.size();
        if(m==0){
            return;
        }
        int n=board[0].size();
        UF uf(m*n+1);//将m*n（也就是最后一个）用于记录在边界的'O'，而不是下标为0的那个位置。
        
        for(int i=0;i<m;++i){
            for(int j=0;j<n;++j){
                if((i==0||i==m-1||j==0||j==n-1)&&board[i][j]=='O'){
                    uf.connect(i*n+j,m*n);//i*m+n这种方式，可以反算会原始的横纵坐标，就是除m以及取余m
                }else if(board[i][j]=='O'){
                    if(board[i-1][j]=='O')
                        uf.connect(i*n+j,(i-1)*n+j);
                    if(board[i+1][j]=='O')
                        uf.connect(i*n+j,(i+1)*n+j);
                    if(board[i][j-1]=='O')
                        uf.connect(i*n+j,i*n+j-1);
                    if(board[i][j+1]=='O')
                        uf.connect(i*n+j,i*n+j+1);
                }
            }
        }
        for(int i=1;i<m-1;++i){
            for(int j=1;j<n-1;++j){
                if(board[i][j]=='O'){
                    if(!uf.connected(i*n+j,m*n)){//注意要加叹号逻辑才正确，内部的'O'不与边界联通是，才改
                        //为'X'
                        board[i][j]='X';
                    }
                }
            }
        }
        
    }
};
====================================
130. Surrounded Regions
Given a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

Example:

X X X X
X O O X
X X O X
X O X X
After running your function, the board should be:

X X X X
X X X X
X X X X
X O X X
Explanation:

Surrounded regions shouldn’t be on the border, which means that any 'O' on the border of the board are not flipped to 'X'. Any 'O' that is not on the border and it is not connected to an 'O' on the border will be flipped to 'X'. Two cells are connected if they are adjacent cells connected horizontally or vertically.
