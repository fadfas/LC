class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int left = 0, right = matrix[0].size()-1, top = 0, bottom = matrix.size()-1;
        vector<int> res;
        int total = (right + 1) * (bottom + 1);
        while(res.size()<total){
            for (int i = left;i<=right&&res.size()<total;++i){//&&res.size()<total别忘了这个，否则扁长的输入，会导致输出结果错误
                res.push_back(matrix[top][i]);
            }
            ++top;
            for (int i = top; i <= bottom&&res.size()<total;++i){
                res.push_back(matrix[i][right]);
            }
            --right;
            for (int i = right; i >= left&&res.size()<total;--i){
                res.push_back(matrix[bottom][i]);
            }
            --bottom;
            for (int i = bottom; i >= top&&res.size()<total;--i){
                res.push_back(matrix[i][left]);
            }
            ++left;
        }
        return res;
    }
};
=======================================
54. Spiral Matrix
Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

Example 1:

Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
Output: [1,2,3,6,9,8,7,4,5]
