class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int m = matrix.size(), n = matrix[0].size();
        int cs = 0, ce = n - 1, rs = 0, re = m - 1;
        vector<int> res;
        while (cs <= ce && rs <= re)
        {
            for (int j = cs; j <= ce;++j){
                res.emplace_back(matrix[rs][j]);
            }
            ++rs;
            if(rs>re)//不是正方形的矩阵，就要判断这个
                break;//lc 59就是正方形的，就不用担心这一点
            for (int i = rs; i <= re; ++i)
            {
                res.emplace_back(matrix[i][ce]);
            }
            --ce;
            if(cs>ce)
                break;
            for (int j = ce; j >= cs; --j)
            {
                res.emplace_back(matrix[re][j]);
            }
            --re;
            if(rs>re)
                break;
            for (int i = re; i >= rs; --i)
            {
                res.emplace_back(matrix[i][cs]);
            }
            ++cs;
            if(cs>ce)
                break;
        }
        return res;
    }
};
=======================================
54. Spiral Matrix
Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

Example 1:

Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
Output: [1,2,3,6,9,8,7,4,5]
