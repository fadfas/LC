/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int m, int n) {
        ListNode* pDummyNode=new ListNode(-1);
        pDummyNode->next=head;
        ListNode* pPre=pDummyNode;
        for(int i=0;i<m-1;++i)
            pPre=pPre->next;
        ListNode* pCur=pPre->next;
        for(int i=m;i<n;++i){
            ListNode* pToMove=pCur->next;
            pCur->next=pToMove->next;
            pToMove->next=pPre->next;//不可以赋值为pCur
            pPre->next=pToMove;
        }
        return pDummyNode->next;
    }
};
========================================
-1->   1->  2->  3->    4->5
dummy pre  cur  toMove

92. Reverse Linked List II
Reverse a linked list from position m to n. Do it in one-pass.

Note: 1 ≤ m ≤ n ≤ length of list.

Example:

Input: 1->2->3->4->5->NULL, m = 2, n = 4
Output: 1->4->3->2->5->NULL
