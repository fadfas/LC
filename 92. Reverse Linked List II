/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 class Solution { //递归的方法，感受递归的思想即可。
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if(left==1){
            return reverseN(head,right);
        }
        ListNode* pLast=reverseBetween(head->next,left-1,right-1);
        head->next=pLast;
        return head;
        
    }
private:
    ListNode* successor=nullptr;
    ListNode* reverseN(ListNode* head,int n){
        if(n==1){
            successor=head->next;
            return head;
        }
        
        ListNode* pNewHead=reverseN(head->next,n-1);
        head->next->next=head;
        head->next=successor;
        return pNewHead;
    }
};
class Solution {
//详细思路见 https://leetcode.cn/problems/reverse-linked-list-ii/solution/fan-zhuan-lian-biao-ii-by-leetcode-solut-teyq/ 解法二
public:
    ListNode* reverseBetween(ListNode* head, int m, int n) {
        ListNode* pDummyNode=new ListNode(-1);
        pDummyNode->next=head;
        ListNode* pPre=pDummyNode;
        for(int i=0;i<m-1;++i)
            pPre=pPre->next;
        ListNode* pCur=pPre->next;
        for(int i=m;i<n;++i){//每次指
            ListNode* pToMove=pCur->next;
            pCur->next=pToMove->next;
            pToMove->next=pPre->next;//不可以赋值为pCur
            pPre->next=pToMove;
        }
        return pDummyNode->next;
    }
};
========================================
-1->   1->  2->  3->    4->5
dummy pre  cur  toMove

92. Reverse Linked List II
Reverse a linked list from position m to n. Do it in one-pass.

Note: 1 ≤ m ≤ n ≤ length of list.

Example:

Input: 1->2->3->4->5->NULL, m = 2, n = 4
Output: 1->4->3->2->5->NULL
