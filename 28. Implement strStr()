class Solution {
public:
    int strStr(string haystack, string needle) {
    	int m=haystack.size(),n=needle.size();
    	int i=0,j=0;
    	while(i<m && j<n){
    		if(haystack[i]==needle[j]){
    			++i,++j;
    		}else{
    			while(j>0 && haystack[i]!=needle[j]){
    				j=next[j-1];
    			}
    			if(haystack[i]!=needle[j]){
    				++i;
    			}
    		}
    	}
    	if(j==n){
    		return i-n;
    	}
    	return -1;
    }
private:
	vector<int> calc(string needle){
		int n=needle.size();
		vector<int> next(n,0);
		int i=0,j=1;
		while(j<n){
			if(needle[i]==needle[j]){
				next[j]=++i;
				++j;
			}else{
				while(i>=1 && needle[i]!=needle[j]){
					i=next[i-1]
				}
				if(needle[i]!=needle[j]){
					++j;
				}
			}
		}
		return next;
	}
};
=================================================
28. Implement strStr()
Implement strStr().

Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.
KMP算法的讲解可以参考以下博客，但是程序还是不要看他的了，似乎有错
https://blog.csdn.net/starstar1992/article/details/54913261/
