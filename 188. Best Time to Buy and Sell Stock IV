class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
         if(prices.size()<2)
            return 0;
        int len=prices.size();
        if (k>len/2){ // 别忘了这种情况，就是可以交易的次数灰常多
            int ans = 0;
            for (int i=1; i<len; ++i){
                ans += max(prices[i] - prices[i-1],0);
            }
            return ans;
        }
        int* dp=new int[k+1];//注意维度不要写成k
        int* tmpMax=new int[k+1];
        fill_n(tmpMax,k+1,-prices[0]);
        fill_n(dp,k+1,0);
        for(int i=1;i<prices.size();++i){
            for(int kk=1;kk<=k;++kk){
                dp[kk]=max(dp[kk],prices[i]+tmpMax[kk]);
                tmpMax[kk]=max(tmpMax[kk],dp[kk-1]-prices[i]);//这句话放在dp前还是dp后，结果都是对的
            }
        }
        return dp[k];
    }
};
============================================
188. Best Time to Buy and Sell Stock IV
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most k transactions.

Note:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
