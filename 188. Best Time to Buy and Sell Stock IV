class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        if(prices.empty()){
            return 0;
        }
        int n = prices.size();
        vector<vector<int> > dp(n, vector<int>(2*k + 1, 0));//注意是2*k，不是k
        for (int i = 1; i <= 2*k;i=i+2){
            dp[0][i] = -prices[0];
        }
        for (int i = 1; i < n;++i){
            for (int j = 1; j <= 2*k;++j)
                if((j&1)==1){
                    dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] - prices[i]);
                }else{
                    dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + prices[i]);
                }
        }
        return dp.back().back();
    }
};
============================================
参考：https://www.programmercarl.com/0188.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIV.html
188. Best Time to Buy and Sell Stock IV
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most k transactions.

Note:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
