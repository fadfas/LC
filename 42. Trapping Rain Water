class Solution {
public:
    int trap(vector<int>& height) {
        int res = 0;
        if(height.size()<3){
            return res;
        }
        int left_max = height[0], right_max = height.back();
        int i = 0, j = height.size() - 1;
        while(i<=j){
            if(left_max<right_max){
                // res += (left_max - height[i]);
                // left_max = max(left_max, height[++i]);//这种写法，回来i、j都跑到边界的情况下，出现数组越界问题
                if(height[i]>=left_max){
                    left_max = height[i];
                }else{
                    res += (left_max - height[i]);
                }
                ++i;
            }
            else
            {
                // res += (right_max - height[j]);
                // right_max = max(right_max, height[--j]);
                if(height[j]>=right_max){
                    right_max = height[j];
                }else{
                    res += (right_max - height[j]);
                }
                --j;
            }
        }
        return res;
    }
};
class Solution {
public:
    int trap(vector<int>& height) {
        int left=0,right=height.size()-1;
        int leftMax=height[0],rightMax=height[right];
        int res=0;
        while(left<=right){
            leftMax=max(height[left],leftMax);
            rightMax=max(height[right],rightMax);
            if(leftMax<rightMax){
                res+=(leftMax-height[left]);
                ++left;
            }else{
                res+=(rightMax-height[right]);
                --right;
            }
        }
        return res;
    }
};
===============================================
参考：https://www.cnblogs.com/grandyang/p/4402392.html  或者看 labuladong P364
42. Trapping Rain Water
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.
