class Solution {
    int _ = []() {ios::sync_with_stdio(0), cin.tie(0), cout.tie(0); return 0; }();
public:
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        vector<vector<int>> result={};
        vector<int> temp={};
        sort(nums.begin(),nums.end());
        subsetsWithDupRecursively(nums,result,temp,0);
        return result;
    }
private:
    void subsetsWithDupRecursively(vector<int>& nums,vector<vector<int>>& result,vector<int>& temp,int start){
        result.push_back(temp);
        for(int i=start;i<nums.size();++i){
            if(i==start||nums[i]!=nums[i-1]){
                temp.push_back(nums[i]);
                subsetsWithDupRecursively(nums,result,temp,i+1);
                temp.pop_back();
            }
        }
    }
};

===========================================================
90. Subsets II
Given a collection of integers that might contain duplicates, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.
