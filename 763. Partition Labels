class Solution {
public:
    vector<int> partitionLabels(string s) {
        int loc[26] = {0};
        for (int i = 0; i < s.size();++i)
        {
            int idx = s[i] - 'a';
            loc[idx] = max(loc[idx], i);
        }
        int start=0,cur_end = 0;
        vector<int> res;
        for (int i = 0; i < s.size(); ++i)
        {
            cur_end = max(cur_end, loc[s[i] - 'a']);
            if(cur_end==i){
                res.emplace_back(cur_end - start + 1);
                start = i + 1;
            }
        }
        return res;
    }
};

//这个方法是自己想的，总体来说不是最优方案，但是其中的一些注意的点，还是要多留意的。
class Solution {
public:
    vector<int> partitionLabels(string s) {
        vector<pair<int, int> > tmp(26, {-1,-1});
        for (int i = 0; i < s.size();++i)
        {
            char c = s[i];
            int idx = c - 'a';
            if(tmp[idx].first==-1){
                tmp[idx].first = i;
                tmp[idx].second = i;
            }else{
                tmp[idx].second = i;
            }
        }
        vector<pair<int, int> > loc;
        for (pair<int, int> each : tmp)
        {
            if(each.first!=-1){
                loc.emplace_back(each);
            }
        }
        sort(loc.begin(), loc.end(), [](const pair<int, int> &lhs, const pair<int, int> &rhs)
             { return lhs.first < rhs.first; });
        vector<int> res;
        int start = loc[0].first;
        int cur_end = loc[0].second;
        for (int i = 1; i < loc.size(); ++i)
        {
            if(loc[i].first<cur_end){
                cur_end = max(loc[i].second,cur_end);
                //对于这种更新类的操作，要下意识的想，是否需要取max
                //不能想当然的cur_end = loc[i].second；
            }else{
                res.emplace_back(cur_end - start + 1);
                start = loc[i].first;
                cur_end = loc[i].second;
            }
        }
        res.emplace_back(cur_end - start + 1);
        //像上面这种for循环，需要特定情况才触发结果存储的，要考虑到
        //最后一次循环，如果没触发，则需要手动的触发一下。
        return res;
    }
};
=====================================================================
763. Partition Labels
You are given a string s. We want to partition the string into as many parts as possible so that each letter appears in at most one part.
Note that the partition is done so that after concatenating all the parts in order, the resultant string should be s.
Return a list of integers representing the size of these parts.
