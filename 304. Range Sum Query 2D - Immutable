class NumMatrix {
public:
    NumMatrix(vector<vector<int>> matrix) {
        int rows=matrix.size();
        int cols=rows==0?0:matrix[0].size();//如果rows==0的话，直接matrix[0]就会报错
        sum=vector<vector<int>>(rows+1,vector<int>(cols+1,0));//学习这种定义方法！！！
        for(int i=1;i<rows+1;++i){
            for(int j=1;j<cols+1;++j){
                sum[i][j]=sum[i-1][j]+sum[i][j-1]+matrix[i-1][j-1]-sum[i-1][j-1];
                //始终记住sum[i+1][j+1]代表从matrix[0][0]到matrix[i][j]的和就可以了
            }
        }
    }
    
    int sumRegion(int row1, int col1, int row2, int col2) {
        return sum[row2+1][col2+1]-sum[row2+1][col1]-sum[row1][col2+1]+sum[row1][col1];
        //为何减去sum(row2+1,col1)?因为：需要减去从matrix[0][0]到matrix[row2,col1-1]的和
        //也就是sum(row2+1,col1)
    }
private:
    vector<vector<int>> sum;
};

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix obj = new NumMatrix(matrix);
 * int param_1 = obj.sumRegion(row1,col1,row2,col2);
 */
 ==========================================
 304. Range Sum Query 2D - Immutable
Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).

Range Sum Query 2D
The above rectangle (with the red border) is defined by (row1, col1) = (2, 1) and (row2, col2) = (4, 3), which contains sum = 8.
