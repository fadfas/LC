class Solution {
public:
    int search(vector<int>& nums, int target) {
        if(nums.size()==0){
            return -1;
        }
        int low=0,high=nums.size()-1;
        while(low<=high){  //注意是<=，如何判断有没有等于号？用一个例子，例如 8 9 ,下标对应为1 2，查找9
            int mid=(low+high)/2;
            if(nums[mid]==target) return mid;
            if(nums[mid]<nums[high]){
                if(target>nums[mid]&&target<=nums[high]){
                    low=mid+1;
                }else{
                    high=mid-1;
                }
            }else{
                if(target>=nums[low]&&target<nums[mid]){
                    high=mid-1;
                }else{
                    low=mid+1;
                }
            }
        }
        return -1;  //不要遗漏
    }
};

==============================================================
主要参考：https://www.cnblogs.com/grandyang/p/4325648.html
一定要学会像主要参考中那样，把所有情况都列出来，非常易于分析问题！！！！
33. Search in Rotated Sorted Array
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).
