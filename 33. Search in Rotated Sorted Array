class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n=nums.size();
        int s = 0, e = n - 1;
        while(s<=e){
            int mid = s + (e - s) / 2;
            if(nums[mid]==target){
                return mid;
            }
            // 这里写 <= 是因为，如果 nums 为 [3, 1] 那么当 l = 0, r = 1, mid = 0 时，使用 < 来判断，则会将 [nums[0], nums[1]] 当做有序数组
            if(nums[s]<=nums[mid]){
                if(nums[s]<=target && target<nums[mid]){
                    e = mid - 1;
                }else{
                    s = mid + 1;
                }
            }else{
                if(nums[mid]<target && target<=nums[e]){
                    s = mid + 1;
                }else{
                    e = mid - 1;
                }
            }
        }
        return -1;
    }
};

==============================================================
主要参考：https://www.cnblogs.com/grandyang/p/4325648.html
一定要学会像主要参考中那样，把所有情况都列出来，非常易于分析问题！！！！
33. Search in Rotated Sorted Array
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).
