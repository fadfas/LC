class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> res;
        deque<int> dq;
        for(int i=0;i<nums.size();++i){
            if(!dq.empty()&&dq.front()==i-k){
                dq.pop_front();
            }
            while(!dq.empty()&&nums[dq.back()]<=nums[i]){
                dq.pop_back();
            }
            dq.push_back(i);
            if(i>=k-1){
                res.push_back(nums[dq.front()]);
            }
        }
        return res;
    }
};
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        if(nums.empty()){
            return {};
        }
        multiset<int> ms;
        vector<int> res;
        for(int i=0;i<k;++i){
            ms.insert(nums[i]);
        }
        for(int i=k;i<nums.size();++i){
            res.push_back(*ms.rbegin());
            ms.erase(ms.find(nums[i-k]));//set的这种erase和find搭配的方法学习！！！！
            ms.insert(nums[i]);
        }
        res.push_back(*ms.rbegin());//学习这种从set中取最大元素的方法！！！
        return res;
    }
};
================================================
239. Sliding Window Maximum
Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.

Example:

Input: nums = [1,3,-1,-3,5,3,6,7], and k = 3
Output: [3,3,5,5,6,7] 
Explanation: 

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
