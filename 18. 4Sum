vector<vector<int>> fourSum(vector<int>& nums, int target) {
	vector<vector<int>> result = {};
	if (nums.size()<4) {
		return result;
	}
	int size = nums.size();
	sort(nums.begin(), nums.end());
	for (int i = 0; i<size - 3; ++i) {
		if (i>0&&nums[i] == nums[i - 1]) continue;
		if (nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3]>target) break;  
		if (nums[i] + nums[size - 1] + nums[size - 2] + nums[size - 3]<target) continue;  //不是break

		for (int j = i + 1; j<nums.size() - 2; ++j) {  //注意j的起始点
			if (j>i+1&&nums[j] == nums[j - 1]) continue;//注意不可以写成 if(nums[i]==nums[i+1]) continue;
													//对于{ 1,0,-1,0,-2,2 },当i=0，j=2时，此时若跳过j=2,直接j=3则会导致-2,0,0,2的结果被跳过
													//也不可以写成j>0或者j>i，应该是j>i+1
			if (nums[i] + nums[j] + nums[j + 1] + nums[j + 2]>target) break;
			if (nums[i] + nums[j] + nums[size - 1] + nums[size - 2]<target) continue;

			int low = j + 1, high = size - 1;
			while (low<high) {
				int sum = nums[i] + nums[j] + nums[low] + nums[high];
				if (sum == target) {
					result.push_back({ nums[i],nums[j],nums[low],nums[high] });
					while (low<high&&nums[high] == nums[high - 1]) --high;
					while (low<high&&nums[low] == nums[low + 1]) ++low;
					++low, --high;
				}
				else if (sum>target) {
					while (low<high&&nums[high] == nums[high - 1]) --high;  //可以优化成do{} while()的形式
					--high;
				}
				else {
					while (low<high&&nums[low] == nums[low + 1]) ++low;
					++low;
				}
			}
		}
	}
	return result;
}

==================================================================
18. 4Sum
Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target ? Find all unique quadruplets in the array which gives the sum of target.
