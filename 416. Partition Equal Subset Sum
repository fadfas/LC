class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int sum=0;
        for(auto e:nums){
            sum+=e;
        }
        if(sum%2==1){
            return false;
        }
        int target=sum/2;
        vector<bool> dp(target+1,false);
        dp[0]=true;
        for(int i=1;i<nums.size()+1;++i){
            for(int j=target;j>=1;--j){
                if(j>=nums[i-1]){
                    dp[j]=dp[j]||dp[j-nums[i-1]];
                }
            }
        }
        return dp[target];
        
    }
};
=====================================================================
416. Partition Equal Subset Sum
Given a non-empty array nums containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.

Example 1:
Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].
