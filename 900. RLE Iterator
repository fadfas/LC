class RLEIterator {
public:
    RLEIterator(vector<int> A) {
        remain=A;        
    }
    
    int next(int n) {
        while(cur<=remain.size()-2&&n>remain[cur]){//判断cur<=size-2要放在remain[cur]前面！！
            n-=remain[cur];
            cur+=2;
        }
        if(cur==remain.size()) return -1;
        remain[cur]-=n;
        int res=remain[cur+1];
        return res;
    }
private:
    int cur=0;
    vector<int> remain;
};

/**
 * Your RLEIterator object will be instantiated and called as such:
 * RLEIterator obj = new RLEIterator(A);
 * int param_1 = obj.next(n);
 */
 ==========================================
 900. RLE Iterator
 For example, we start with A = [3,8,0,9,2,5], which is a run-length encoding of the sequence [8,8,8,5,5].  This is because the sequence can be read as "three eights, zero nines, two fives".
 
Input: ["RLEIterator","next","next","next","next"], [[[3,8,0,9,2,5]],[2],[1],[1],[2]]
Output: [null,8,8,5,-1]
Explanation: 
RLEIterator is initialized with RLEIterator([3,8,0,9,2,5]).
This maps to the sequence [8,8,8,5,5].
RLEIterator.next is then called 4 times:

.next(2) exhausts 2 terms of the sequence, returning 8.  The remaining sequence is now [8, 5, 5].

.next(1) exhausts 1 term of the sequence, returning 8.  The remaining sequence is now [5, 5].

.next(1) exhausts 1 term of the sequence, returning 5.  The remaining sequence is now [5].

.next(2) exhausts 2 terms, returning -1.  This is because the first term exhausted was 5,
but the second term did not exist.  Since the last term exhausted does not exist, we return -1.
