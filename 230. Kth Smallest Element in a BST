/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
private:
    struct CountTreeNode{
        int count;
        int val;
        CountTreeNode* left;
        CountTreeNode* right;
        CountTreeNode(int v): count(1),val(v),left(nullptr),right(nullptr){}//构造器末尾没有分号
    };//count代表包括自己及左右子树全部节点数量
    CountTreeNode* build(TreeNode* root){//学习这种模仿建树的方法！！！
        if(!root)
            return nullptr;
        CountTreeNode* pNode=new CountTreeNode(root->val);
        pNode->left=build(root->left);
        pNode->right=build(root->right);
        if(pNode->left)
            pNode->count+=pNode->left->count;
        if(pNode->right)
            pNode->count+=pNode->right->count;
        return pNode;
    }
public:
    int kthSmallest(TreeNode* root, int k) {
        CountTreeNode* pRoot=build(root);
        return find(pRoot,k);
    }
    int find(CountTreeNode* pRoot,int k){
        int lCount=pRoot->left?pRoot->left->count:0;
        if(lCount>=k){
            return find(pRoot->left,k);
        }else if(lCount+1==k){
            return pRoot->val;
        }else{
            return find(pRoot->right,k-lCount-1);
        }
    }

};

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        int res=0;
        inOrder(root,k,res);
        return res;
    }
private:
    void inOrder(TreeNode* pNode,int& k,int& res){
        if(!pNode)
            return;
        inOrder(pNode->left,k,res);
        if(--k==0){
            res=pNode->val;
            //return;
        }
        if(k>0){
            inOrder(pNode->right,k,res);
        }
    }
};

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        stack<TreeNode*> s;
        TreeNode* p=root;
        while(p||!s.empty()){
            while(p){
                s.push(p);
                p=p->left;
            }
            p=s.top();
            s.pop();
            if(--k==0){
                return p->val;
            }
            p=p->right;
        }
        return 0;
    }
};
===============================================
230. Kth Smallest Element in a BST
Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Note: 
You may assume k is always valid, 1 ≤ k ≤ BST's total elements.

Example 1:

Input: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
Output: 1
