class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int target) {
        int sum=0;
        for(int num:nums){
            sum += num;
        }
        if(sum<target||sum<(-1*target)){
            return 0;
        }//别忘了特殊情况
        int tmp = sum + target;
        if((tmp&1)==1){
            return 0;
        }//这个不能删掉，否则会报错
        int pos_sum = tmp / 2;
        int n = nums.size();
        vector<int> dp(pos_sum + 1, 0);

        dp[0] = 1;
        for (int i = 1; i <= n; ++i)
        {
            for (int j = pos_sum; j >= nums[i - 1];--j){
                dp[j] += dp[j - nums[i - 1]];
            }
        }
        return dp[pos_sum];
    }
};
class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int target) {
        int sum=0;
        for(int num:nums){
            sum += num;
        }
        if(sum<target||sum<(-1*target)){
            return 0;
        }//别忘了特殊情况
        int tmp = sum + target;
        if((tmp&1)==1){
            return 0;
        }//这个不能删掉，否则会报错
        int pos_sum = tmp / 2;
        int n = nums.size();
        vector<vector<int> > dp(n+1,vector<int>(pos_sum+1,0));

        dp[0][0] = 1;
        for (int i = 1; i <= n;++i){
            dp[i][0] =dp[i-1][0];
            if(nums[i-1]==0){
                dp[i][0] += dp[i - 1][0];
            }//为了处理【0,0,0,0,1】的情况，因为0装不装进背包中，都不会对结果产生影响。
        }
        for (int i = 1; i <= n; ++i)
        {
            for (int j = 1; j <= pos_sum;++j){
                if(j<nums[i-1]){
                    dp[i][j] = dp[i - 1][j];
                }else{
                    dp[i][j] = dp[i - 1][j] + dp[i - 1][j - nums[i - 1]];
                }
            }
        }
        return dp[n][pos_sum];
    }
};
=====================================================================
494. Target Sum
You are given an integer array nums and an integer target.
You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.
For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
Return the number of different expressions that you can build, which evaluates to target.
