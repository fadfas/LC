class Solution {
public:
	vector<vector<int>> threeSum(vector<int>& nums) {
		vector<vector<int>> result = {};
		if (nums.size()<3) {
			return result;
		}
		sort(nums.begin(), nums.end());  //因为排序复杂度为O(nlogn),而后面双层循环为o(n^2)，所以此处可以使用现成的排序算法
		for (int i = 0; i<nums.size() - 2; ++i) {//注意边界
			            // if(nums[i]==nums[i+1]&&i<nums.size()-3){
				    //     continue;
				    // }  不能用以上三行取代下一行，因为会导致{-4,-1,-1,0,1,2}这种输入，略过{-1,-1,2}的组合
			if (i == 0 || nums[i] != nums[i - 1]) {
				int sum = 0 - nums[i];
				int low = i + 1, high = nums.size() - 1;
				while (low<high) {
					if (nums[low] + nums[high] == sum) {
						result.push_back({ nums[i],nums[low],nums[high] });
						//++low, --high;//放在这，就错了
						while (low<high&&nums[low] == nums[low + 1]) ++low;
						////先判断 low<hig 再 判断 nums[low] == nums[low + 1]，颠倒就会越界
						while (low<high&&nums[high] == nums[high - 1]) --high;
						++low, --high; //别忘了还得各自加减一下
					}
					else if (nums[low] + nums[high]<sum) {
						++low;
					}
					else {
						--high;
					}
				}
			}
		}
		return result;
	}
};

//=================================================================
15. 3Sum
Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0 ? Find all unique triplets in the array which gives the sum of zero.

Note :

	The solution set must not contain duplicate triplets.
