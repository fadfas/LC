/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */

class NestedIterator {
public:
    NestedIterator(vector<NestedInteger> &nestedList) {
        b.push(nestedList.begin());
        e.push(nestedList.end());
    }
    
    int next() {
        return (b.top()++)->getInteger();//先调用get函数，再++
    }
    bool hasNext2() {
        while(!s.empty()){
            if(s.top()==e.top()){
                s.pop(),e.pop();
            }else{
                NestedInteger &ni=*s.top();//这个地方必须声明为引用类型
                //NestedInteger ni=*s.top();//如果这样的话，就会复制生成一份新的对象了，当前作用于结束后，对象就销毁了
                if(ni.isInteger()){
                    return true;
                }
                s.top()++;
                vector<NestedInteger> &ni_vec=ni.getList();//同理，这个地方也要引用类型
                s.push(ni_vec.begin());//const vector<NestedInteger> &getList() const; 这个地方感觉有点儿问题
                //感觉实际的函数类型应该是： vector<NestedInteger> &getList() const
                e.push(ni_vec.end());//否则 vector<NestedInteger> &ni_vec=ni.getList() 应该会报错的
            }
        }
        return false;
    }
    bool hasNext() {
        while(!b.empty()){
            if(b.top()==e.top()){
                b.pop(),e.pop();
            }else{
                auto x=b.top();
                if(x->isInteger()){
                    return true;
                }
                b.top()++;
                b.push(x->getList().begin());
                e.push(x->getList().end());
            }
        }
        return false;
    }
private:
    stack<vector<NestedInteger>::iterator> b,e;//不可以写成stack<NestedInteger::iterator> 
};

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i(nestedList);
 * while (i.hasNext()) cout << i.next();
 */
======================================
341. Flatten Nested List Iterator
Given a nested list of integers, implement an iterator to flatten it.

Each element is either an integer, or a list -- whose elements may also be integers or other lists.

Example 1:

Input: [[1,1],2,[1,1]]
Output: [1,1,2,1,1]
Explanation: By calling next repeatedly until hasNext returns false, 
             the order of elements returned by next should be: [1,1,2,1,1].
Example 2:

Input: [1,[4,[6]]]
Output: [1,4,6]
Explanation: By calling next repeatedly until hasNext returns false, 
             the order of elements returned by next should be: [1,4,6].
