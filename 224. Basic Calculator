class Solution {
public:
    int calculate(string s) {
        long long num=0,res=0;
        int sign=1;
        stack<int> st;
        for(int i=0;i<s.size();++i){
            if(s[i]>='0'&&s[i]<='9'){
                num=num*10+s[i]-'0';
            }else if(s[i]=='+'||s[i]=='-'){
                res+=sign*num;
                num=0;
                sign=s[i]=='+'?1:-1;
            }else if(s[i]=='('){
                st.push(res);
                st.push(sign);
                sign=1;
                res=0;
            }else if(s[i]==')'){
                res+=sign*num;
                num=0;//还是要设置为零的，否则以右括号结尾的式子，会在return的前一行，再加一次num
                res*=st.top();st.pop();
                res+=st.top();st.pop();
            }
        }
        res+=sign*num;
        return res;
    }
};
======================================
224. Basic Calculator
Implement a basic calculator to evaluate a simple expression string.
The expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .

Input: "1 + 1"
Output: 2

Input: " 2-1 + 2 "
Output: 3

Input: "(1+(4+5+2)-3)+(6+8)"
Output: 23
