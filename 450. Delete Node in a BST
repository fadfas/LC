/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(root==nullptr){
            return root;
        }
        if(root->val>key){
            root->left=deleteNode(root->left,key); //学习bst这种deleteNode函数的写法，即deleteNode函数返回的是最终处理完的root->left节点
            return root;
        }else if(root->val<key){
            root->right=deleteNode(root->right,key);
            return root;
        }else{
            if(root->left==nullptr && root->right==nullptr){
                return nullptr;
            }
            if(root->left==nullptr || root->right==nullptr){
                return root->left?root->left:root->right;
            }
            TreeNode* pSucc=findSuccessor(root);//使用这种用后继替换root的方法吧，不要直接覆盖val值了
            root->right=deleteNode(root->right,pSucc->val);
            pSucc->left = root->left;
            pSucc->right = root->right;
            delete root;
            return pSucc;
        }
    }
    TreeNode* findSuccessor(TreeNode* pNode){ //找到后继节点
        pNode=pNode->right;
        while(pNode->left){
            pNode=pNode->left;
        }
        return pNode;
    }
};
=====================================================================
450. Delete Node in a BST
Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.

Basically, the deletion can be divided into two stages:

Search for a node to remove.
If the node is found, delete the node.
