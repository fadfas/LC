class Solution {
public:
    vector<string> findMissingRanges(vector<int>& nums, int lower, int upper) {
        long long l=lower;
        vector<string> res;
        for(int i=0;i<nums.size();++i){
            if(i<nums.size()-1&&nums[i]==nums[i+1])//处理元素相等的情况
                continue;
            if(l==nums[i]){
                ++l;
                continue;
            }
            long long end=(long long)nums[i]-1;
            res.push_back(process(l,end));
            l=(long long)(nums[i])+1;//别忘了类型转换！！！,但是注意不是(long long)(nums[i]+1)因为nums[i]是int类型，
        }//加一后就会溢出，因此要先把nums[i]转换为long long 类型
        if(l<=upper){
            res.push_back(process(l,upper));
        }
        return res;
    }
private:
    string process(long long s,long long e){
        return s==e?to_string(s):to_string(s)+"->"+to_string(e);
    }
};
===========================================
163. Missing Ranges
Given a sorted integer array nums, where the range of elements are in the inclusive range [lower, upper], return its missing ranges.

Example:

Input: nums = [0, 1, 3, 50, 75], lower = 0 and upper = 99,
Output: ["2", "4->49", "51->74", "76->99"]
