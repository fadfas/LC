class Solution {
public:
    int longestPalindromeSubseq(string s) {
        int n = s.size();
        vector<vector<int> > dp(n, vector<int>(n, 0));
        for (int i = 0; i < n;++i){
            dp[i][i] = 1;
        }
        for (int i = n - 2; i >= 0;--i){
            for (int j = i + 1; j < n;++j){
                if(s[i]==s[j]){
                    dp[i][j] = dp[i + 1][j - 1] + 2;
                }else{
                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);
                }
            }
        }
        return dp[0][n - 1];
    }
};
方法二：将字符串翻转，然后求两个字符串的最长公共子序列就可以了（关键点是，记住回文和字符串翻转有关联就行）
=====================================================================
516. Longest Palindromic Subsequence
Given a string s, find the longest palindromic subsequence's length in s.

A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.
