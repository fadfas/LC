class Solution {
public:
    bool isValid(string s) {
        stack<char> st;
        for(const char &c: s){
            if(c=='('||c=='['||c=='{'){
                st.push(c);
            }else{
                if(c==')'){
                    if(!st.empty()&&st.top()=='('){
                        st.pop();
                    }else{
                        return false;
                    }
                }else if(c==']'){
                    if(!st.empty()&&st.top()=='['){
                        st.pop();
                    }else{
                        return false;
                    }
                }else{
                    if(!st.empty()&&st.top()=='{'){
                        st.pop();
                    }else{
                        return false;
                    }
                }
            }
        }
        return st.empty();
    }
};
=========================================
原理：
It's brilliant. The basic idea is to push the right parentheses ')', ']', or '}' into the stack each time when we encounter left ones. 
And if a right bracket appears in the string, we need check if the stack is empty and also whether the top element is the same with that 
right bracket. If not, the string is not a valid one. At last, we also need check if the stack is empty.
20. Valid Parentheses
Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Note that an empty string is also considered valid.
