class Solution {
public:
    TreeNode* convertBST(TreeNode* root) {
        int sum=0;
        helper(root,sum);
        return root;
    }
private:
    void helper(TreeNode* p,int &sum){
        if(p==nullptr){
            return;
        }
        
        helper(p->right,sum);
        p->val+=sum;
        sum=p->val;
        helper(p->left,sum);
    }
};
 ==================================
538. Convert BST to Greater Tree
Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.

As a reminder, a binary search tree is a tree that satisfies these constraints:
The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
