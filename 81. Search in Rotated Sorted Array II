class Solution {
public:
    bool search(vector<int>& nums, int target) {
        if(nums.empty()){
            return false;
        }
        
        int low=0,high=nums.size()-1;
        while(low<=high){
            int mid=(low+high)>>1;
            if(nums[mid]==target){
                return true;
            }
            if(nums[mid]>nums[high]){
                if(nums[low]<=target&&nums[mid]>target){
                    high=mid-1;
                }else{
                    low=mid+1;
                }
            }else if(nums[mid]<nums[high]){
                if(nums[mid]<target&&nums[high]>=target){
                    low=mid+1;
                }else{
                    high=mid-1;
                }
            }else{
                --high;  //实际上很简单，就是之前用于判断的nums[high]和nums[high-1]相等了，之前的方法卡主了
                        //但是此时数组的其他特性还是和之前一样的，因此--high即可
            }
        }
        return false;
    }
};

===================================================================
81. Search in Rotated Sorted Array II
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).

You are given a target value to search. If found in the array return true, otherwise return false.
