class LFUCache {
public:
    LFUCache(int capacity) {
        cap=capacity;
        size=0;
        minFreq=0;
    }
    
    int get(int key) {
        auto it=key_iter.find(key);
        if(it==key_iter.end()){
            return -1;
        }
        int value=key_valueFreq[key].first;//获取key对应的value以及旧的freq
        int freq=key_valueFreq[key].second;
        
        key_valueFreq[key]=make_pair(value,freq+1);//更新key_valueFreq中数据
        
        list<int>::iterator it_freq_keys=it->second;//这个iter是list<int>用的
        
        freq_keys[freq].erase(it_freq_keys);//freq_keys删除旧数据
        if(freq_keys[minFreq].size()==0){//不是freq_keys[freq].size()==0 !!!!
            minFreq++;//如果当前freq中没有cache了，则minFreq增加1
        }
        freq_keys[freq+1].push_front(key);
        
        key_iter[key]=freq_keys[freq+1].begin();//更新key_iter数据
        return value;       
    }
    
    void put(int key, int value) {
        if(cap==0) return;
        if(get(key)!=-1){//如果key已经存在了
            key_valueFreq[key].first=value;
            return;
        }
        if(size==cap){//如果容量满了，先删除一个cache
            int delKey=freq_keys[minFreq].back();
            
            int freq=key_valueFreq[delKey].second;
            key_valueFreq.erase(delKey);
            
            list<int>::iterator it=key_iter[delKey];
            key_iter.erase(delKey);
            
            freq_keys[freq].erase(it);
            if(freq_keys[freq].size()==0){
                minFreq++;
            }
            --size;
        }
        
        minFreq=1;
        ++size;
        key_valueFreq[key]={value,1};
        freq_keys[1].push_front(key);
        key_iter[key]=freq_keys[1].begin();
    }
private:
    int minFreq;
    int size;
    int cap;
    unordered_map<int,pair<int,int>> key_valueFreq;
    unordered_map<int,list<int>> freq_keys;
    unordered_map<int,list<int>::iterator> key_iter;
};

/**
 * Your LFUCache object will be instantiated and called as such:
 * LFUCache* obj = new LFUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
 =====================================================================
 460. LFU Cache
Design and implement a data structure for a Least Frequently Used (LFU) cache.

Implement the LFUCache class:

LFUCache(int capacity) Initializes the object with the capacity of the data structure.
int get(int key) Gets the value of the key if the key exists in the cache. Otherwise, returns -1.
void put(int key, int value) Update the value of the key if present, or inserts the key if not already present. When the cache reaches its capacity, it should invalidate and remove the least frequently used key before inserting a new item. For this problem, when there is a tie (i.e., two or more keys with the same frequency), the least recently used key would be invalidated.
To determine the least frequently used key, a use counter is maintained for each key in the cache. The key with the smallest use counter is the least frequently used key.

When a key is first inserted into the cache, its use counter is set to 1 (due to the put operation). The use counter for a key in the cache is incremented either a get or put operation is called on it.

The functions get and put must each run in O(1) average time complexity.
