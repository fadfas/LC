class Solution {
public:
    int maxCoins(vector<int>& nums) {
        int n = nums.size();
        vector<int> tmp(n + 2, 1);
        tmp[0] = 1;
        tmp[n + 1] = 1;
        for (int i = 1; i < n + 1; ++i)
        {
            tmp[i] = nums[i - 1];
        }
        vector<vector<int> > dp(n + 2, vector<int>(n+2,0));
        for (int i = n + 2 - 3; i >= 0;--i){
            for (int j = i + 2;j<n+2;++j){
                for (int k = i + 1; k < j;++k){
                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j] + tmp[i] * tmp[k] * tmp[j]);
                }
            }
        }
        return dp[0][n + 1];
    }
};
=====================================================================
312. Burst Balloons
You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.

If you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.

Return the maximum coins you can collect by bursting the balloons wisely.
