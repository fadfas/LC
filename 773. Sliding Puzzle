class Solution {
public:
    int slidingPuzzle(vector<vector<int>>& board) {
        vector<vector<int>> p={{1,3},{0,2,4},{1,5},{0,4},{3,1,5},{2,4}};
         //vector的二维数组，可以这样定义
        unordered_set<string> us;
        queue<string> q;
        string start="";
        for(int i=0;i<2;++i){
            for(int j=0;j<3;++j){
                start.push_back(('0'+board[i][j]));
            }
        }
        q.push(start);
        
        int step=0;
        while(!q.empty()){
            int size=q.size();
            for(int i=0;i<size;++i){
                string cur=q.front();
                q.pop();
                if(cur=="123450"){
                    return step;
                }
                us.insert(cur);
                int idx=cur.find('0');
                vector<int> all_idx=p[idx];
                // for(int idx_next:all_idx){ //还是用这种方式吧，否则下面那种，还有在两个地方swap回去
                //     string next=cur;
                //     swap(next[idx],next[idx_next]);
                //     if(us.find(next)!=us.end()){
                //         continue;
                //     }
                //     q.push(next);
                // }
                for(int idx_next:all_idx){//对于循环，始终别忘了保持：循环不变量，即每次循环的开始，待交换的字符串，都
                     //是同一个
                    swap(cur[idx],cur[idx_next]); //字符串也可以swap
                    if(us.find(cur)!=us.end()){
                        swap(cur[idx],cur[idx_next]);//这个地方别忘了
                        continue;
                    }
                    q.push(cur);
                    us.insert(cur);//这个地方写不写都可以
                    swap(cur[idx],cur[idx_next]);
                }
            }
            ++step;
        }
        return -1;
    }
};
=====================================================================
773. Sliding Puzzle
On an 2 x 3 board, there are five tiles labeled from 1 to 5, and an empty square represented by 0. A move consists of choosing 0 and a 4-directionally adjacent number and swapping it.
The state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].
Given the puzzle board board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return -1.
