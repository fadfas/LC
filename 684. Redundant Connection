class Solution {
public:
	vector<int> findRedundantConnection(vector<vector<int>>& edges) {
		for (auto e : edges) {
			int x = e[0], y = e[1];
			init(x);
			init(y);
			int rootX = find(x);
			int rootY = find(y);
			if (rootX == rootY)
				return e;
			uni(x, y);
		}
		return {};
	}
private:
	unordered_map<int, int> uf;
	void init(int x) {
		if (uf.find(x) == uf.end()) {
			uf[x] = x;
		}
	}
	int find(int x) {
		while (uf[x] != x) {
			uf[x] = uf[uf[x]];
			x = uf[x];
		}
		return x;
	}
	void uni(int x, int y) {
		int rootX = find(x);
		int rootY = find(y);
		if (rootX != rootY) {
			uf[rootX] = rootY;//注意不是uf[x]=rootY;!!!
		}
	}

};
============================================
684. Redundant Connection
In this problem, a tree is an undirected graph that is connected and has no cycles.

The given input is a graph that started as a tree with N nodes (with distinct values 1, 2, ..., N), with one additional edge added. The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.

The resulting graph is given as a 2D-array of edges. Each element of edges is a pair [u, v] with u < v, that represents an undirected edge connecting nodes u and v.

Return an edge that can be removed so that the resulting graph is a tree of N nodes. If there are multiple answers, return the answer that occurs last in the given 2D-array. The answer edge [u, v] should be in the same format, with u < v.

Example 1:
Input: [[1,2], [1,3], [2,3]]
Output: [2,3]
Explanation: The given undirected graph will be like this:
  1
 / \
2 - 3
