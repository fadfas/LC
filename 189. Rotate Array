class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n=nums.size();
        if(k%n==0)
            return;//别忘了！！！
        int start=0,idx=0,pre=0,cur=nums[0];
        for(int i=0;i<n;++i){
            //先不要思考启动流程，思考已经启动完毕后，pre,cur的各自关系
            //当某一轮某一个元素被覆盖时，因为下一轮要用到这个元素，我们将其
            //保存至cur变量，然后用上一轮被覆盖的元素pre来覆盖
            //自然地，当再进入新的一轮，去要将cur内容赋值给pre
            //然后再用cur去记录本轮被覆盖的内容，想清楚这些后，写程序，至于初始化，总体写完后，再写
            //也就是pre=0,cur=nums[0]
            pre=cur;
            idx=(idx+k)%n;
            cur=nums[idx];
            nums[idx]=pre;
            if(idx==start){
                start=++idx;
                cur=nums[start];
            }
        }
    }
};

class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n=nums.size();
        reverse(nums, 0, n - 1);
        reverse(nums, 0, k % n - 1);
        reverse(nums, k % n, n - 1);
    }

private:
    void reverse(vector<int>& nums,int s,int e){
        while(s<e){
            swap(nums[s], nums[e]);
            ++s;
            --e;
        }
    }
};
======================================
189. Rotate Array
Given an array, rotate the array to the right by k steps, where k is non-negative.

Example 1:

Input: [1,2,3,4,5,6,7] and k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
