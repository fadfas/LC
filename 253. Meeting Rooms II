/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    int minMeetingRooms(vector<Interval>& intervals) {
        map<int,int> times;
        for(auto e:intervals){
            ++times[e.start];
            --times[e.end];
        }
        int res=0,room=0;
        for(auto e:times){
            res=max(res,room+=e.second);
        }
        return res;
    }
};
/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    int minMeetingRooms(vector<Interval>& intervals) {
        vector<int> starts;
        vector<int> ends;
        for(auto e:intervals){
            starts.push_back(e.start);
            ends.push_back(e.end);
        }
        sort(starts.begin(),starts.end());
        sort(ends.begin(),ends.end());
        int res=0,endPos=0;
        for(int i=0;i<starts.size();++i){
            if(starts[i]<ends[endPos]){//不是ends[i]
                ++res;
            }else{
                ++endPos;
            }
        }
        return res;
    }
};
===========================================
参考：http://www.cnblogs.com/grandyang/p/5244720.html
LeetCode的solution Approach 2: Chronological Ordering
253. Meeting Rooms II
Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), find the minimum number of conference rooms required.
