class ValidWordAbbr {
public:
    ValidWordAbbr(vector<string> dictionary) {
        for(auto &e:dictionary){
            int n=e.size();
            string abb=n<=2?e:e.front()+to_string(n-2)+e.back();
            if(mp.find(abb)==mp.end()){
                mp[abb]=e;
            }else{
                if(mp[abb]!=e)//应对dictionary内有重复的string情况
                    mp[abb]="";
            }
        }
    }
    
    bool isUnique(string word) {
        int n=word.size();
        string abb=n<=2?word:word.front()+to_string(n-2)+word.back();
        return word==""||mp.find(abb)==mp.end()||mp[abb]==word;
    }
private:
    unordered_map<string,string> mp;
};

/**
 * Your ValidWordAbbr object will be instantiated and called as such:
 * ValidWordAbbr obj = new ValidWordAbbr(dictionary);
 * bool param_1 = obj.isUnique(word);
 */
 =====================================
 288. Unique Word Abbreviation
An abbreviation of a word follows the form <first letter><number><last letter>. Below are some examples of word abbreviations:

a) it                      --> it    (no abbreviation)

     1
     ↓
b) d|o|g                   --> d1g

              1    1  1
     1---5----0----5--8
     ↓   ↓    ↓    ↓  ↓    
c) i|nternationalizatio|n  --> i18n

              1
     1---5----0
     ↓   ↓    ↓
d) l|ocalizatio|n          --> l10n
Assume you have a dictionary and given a word, find whether its abbreviation is unique in the dictionary. A word's abbreviation is unique if no other word from the dictionary has the same abbreviation.

Example:

Given dictionary = [ "deer", "door", "cake", "card" ]

isUnique("dear") -> false
isUnique("cart") -> true
isUnique("cane") -> false
isUnique("make") -> true
