/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        return core(preorder,inorder,0,preorder.size()-1,0,inorder.size()-1);
    }
private:
    TreeNode* core(vector<int>& preorder,vector<int>& inorder,int ps,int pe,int is,int in){
        TreeNode* pNode=new TreeNode(preorder[ps]);
        if(is==in){
            return pNode;
        }
        int middle=is;
        while(inorder[middle]!=preorder[ps]){
            middle++;
        }
        if(middle-is>0){
            pNode->left=core(preorder,inorder,ps+1,ps+1+middle-is-1,is,middle-1);
        }
        if(in-middle>0){
            pNode->right=core(preorder,inorder,ps+1+middle-is,pe,middle+1,in);
        }
        return pNode;
    }
};
=====================================================================
105. Construct Binary Tree from Preorder and Inorder Traversal
Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.
