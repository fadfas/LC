/*
 * @lc app=leetcode id=438 lang=cpp
 *
 * [438] Find All Anagrams in a String
 */

// @lc code=start
class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        unordered_map<char, int> need, window;
        for(char c:p){
            need[c]++;
        }
        vector<int> res;
        int valid = 0;
        int left = 0, right = 0;
        while(right<s.size()){
            char c = s[right];
            right++;
            if(need.count(c)){
                window[c]++;
                if(window[c]==need[c]){
                    valid++;
                    if(valid==need.size()){
                        res.push_back(left);
                    }
                }
            }
            if(right-left==p.size()){
                char c = s[left];
                left++;
                if(need.count(c)){
                    if(need[c]==window[c]){
                        valid--;
                    }
                    window[c]--;
                }
            }
        }
        return res;
    }
};
// @lc code=end
============================================
438. Find All Anagrams in a String
Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
