/*
 * @lc app=leetcode id=438 lang=cpp
 *
 * [438] Find All Anagrams in a String
 */

class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        vector<int> res;
        unordered_map<char, int> need, cnt;
        for(char c:p){
            need[c]++;
        }
        int start = 0, end = 0, valid = 0;
        for (; end < s.size();++end){
            char c = s[end];
            if(need.count(c)){
                cnt[c]++;
                if(need[c]==cnt[c]){
                    ++valid;
                }
            }
            if(end-start+1>p.size()){
                char d = s[start];
                if(need.count(d)){
                    if(cnt[d]==need[d]){
                        --valid;
                    }
                    cnt[d]--;
                }
                ++start;
            }
            if(valid==need.size()){
                res.emplace_back(start);
            }
        }
        return res;
    }
};
============================================
438. Find All Anagrams in a String
Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
