class Solution {
public:
    double mincostToHireWorkers(vector<int>& quality, vector<int>& wage, int K) {
        vector<vector<double>> ratio={};
        for(int i=0;i<quality.size();++i){
            ratio.push_back({(double)(wage[i])/quality[i],(double)quality[i]});
                       //注意类型转换中，类型必须用括号
                        //另外，不可以写成 (double) (wage[i]/quality[i])，这样就没有意义了
        }
        sort(ratio.begin(),ratio.end());//注意此时sort排序的元素，依然是个vector，只不过根据其第一个元素排序
        priority_queue<int> pq;
        double qSum=0;
        double res=DBL_MAX;
        for(auto e:ratio){
            qSum+=e[1],pq.push(e[1]);
            if(pq.size()>K)
                qSum-=pq.top(),pq.pop();
            if(pq.size()==K)
                res=min(res,e[0]*qSum);
        }
        return res;
    }
};
===========================================
一个博客中，如此分析这道题：
问题规模是10000，已经基本说明是O(nlogn)复杂度的算法，这个复杂度最常见的就是排序算法了，本题确实是使用排序算法来进行进行求解。

857. Minimum Cost to Hire K Workers
There are N workers.  The i-th worker has a quality[i] and a minimum wage expectation wage[i].

Now we want to hire exactly K workers to form a paid group.  When hiring a group of K workers, we must pay them according to the following rules:

Every worker in the paid group should be paid in the ratio of their quality compared to other workers in the paid group.
Every worker in the paid group must be paid at least their minimum wage expectation.
Return the least amount of money needed to form a paid group satisfying the above conditions.

 

Example 1:

Input: quality = [10,20,5], wage = [70,50,30], K = 2
Output: 105.00000
Explanation: We pay 70 to 0-th worker and 35 to 2-th worker.
