class Solution {
public:
    bool isMatch(string s, string p) {
        memo=vector<vector<int>>(s.size(),vector<int>(p.size(),-1));
        return dp(s,0,p,0);
    }
private:
    vector<vector<int>> memo;
    bool dp(string s,int i,string p,int j){
        if(i==s.size()){
            if(j==p.size()){
                return true;
            }else{
                if((p.size()-j)%2==1){
                    return false;
                }else{
                    for(j=j+1;j<p.size();j=j+2){
                        if(p[j]!='*'){
                            return false;
                        }
                    }
                    return true;
                }
            }
        }else{
            if(j==p.size()){
                return false;
            }
        }
        int res=0;
        if(memo[i][j]!=-1){
            return memo[i][j];
        }
        if(s[i]==p[j]||p[j]=='.'){
            if(j<p.size()-1&&p[j+1]=='*'){
                res = dp(s,i,p,j+2)||dp(s,i+1,p,j);
            }else{
                res = dp(s,i+1,p,j+1);
            }
        }else{
            if(j<p.size()-1&&p[j+1]=='*'){
                res= dp(s,i,p,j+2);
            }else{
                res= 0;
            }
        }
        memo[i][j]=res;
        return res;
    }
};
===================================================
10. Regular Expression Matching
Given an input string (s) and a pattern (p), implement regular expression matching with support for '.' and '*'.
