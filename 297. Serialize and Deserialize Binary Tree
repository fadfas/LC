/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 class Codec {//后续遍历的方法
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        vector<string> res={};
        string output="";
        if(root==nullptr){
            return output;
        }
        post_ser(root,res);
        for(auto s:res){
            output+=(s+" ");
        }
        output=output.substr(0,output.size()-1);
        return output;

    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        if(data==""){//别忘了判断特殊情况
            return nullptr;
        }
        bool find_flag=true;
        vector<string> input={};
        while(find_flag){
            int pos=data.find(" ");
            if(pos!=string::npos){
                string val=data.substr(0,pos);
                input.push_back(val);
                data=data.substr(pos+1);
            }else{
                input.push_back(data);
                find_flag=false;
            }
        }
        int idx=input.size()-1;
        return post_deser(input,idx);
        
    }
private:
    void post_ser(TreeNode* pNode,vector<string>& res){
        if(pNode==nullptr){
            res.push_back("#");
            return;
        }
        post_ser(pNode->left,res);
        post_ser(pNode->right,res);
        res.push_back(to_string(pNode->val));
    }

    TreeNode* post_deser(vector<string>& input,int& idx){
        if(input[idx]=="#"){
            idx--;//这个地方，一个是别忘了对idx进行操作；另外就是要执行减操作。
            return nullptr;
        }
        TreeNode* pCur=new TreeNode(stoi(input[idx]));
        idx--;
        pCur->right=post_deser(input,idx);
        pCur->left=post_deser(input,idx);
        
        return pCur;
        
    }
};
class Codec {//前序遍历的方法
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        string res="";
        serializeCore(root,res);
        return res;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        return deserializeCore(data);
    }
private:
    void serializeCore(TreeNode* pNode,string& res){
        if(!pNode){
            //res+='# ';这样写法是错的，因为''代表着char类型！！！
            res+="# ";
            return;
        }
        res+=(to_string(pNode->val)+" ");
        serializeCore(pNode->left,res);
        serializeCore(pNode->right,res);
    }
    TreeNode* deserializeCore(string& data){
        string next=getNext(data);
        if(next=="#"){//别写成'#'
            return nullptr;
        }
        TreeNode* pNode=new TreeNode(stoi(next));
        pNode->left=deserializeCore(data);
        pNode->right=deserializeCore(data);
        return pNode;
    }
    string getNext(string& data){
        int pos=data.find(' ');
        string res=data.substr(0,pos);//左闭右开！！！
        data=data.substr(pos+1);
        return res;
    }
};
=============================================
297. Serialize and Deserialize Binary Tree
Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

Example: 

You may serialize the following tree:

    1
   / \
  2   3
     / \
    4   5

as "[1,2,3,null,null,4,5]"
