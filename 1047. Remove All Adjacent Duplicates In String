class Solution {
public:
    string removeDuplicates(string s) {
        string res = "";
        for(const char &c:s){
            if(!res.empty()&&res.back()==c){
                res.pop_back();
            }else{
                res.push_back(c);
            }
        }
        return res;
    }
};
class Solution {
public:
    string removeDuplicates(string s) {
        stack<char> st;
        for(const char &c:s){
            if(!st.empty()&&st.top()==c){
                st.pop();
            }else{
                st.push(c);
            }
        }
        int n = st.size();
        string res(n, ' ');//不要写成双引号
        for (int i = n - 1; i >= 0;--i){
            res[i] = st.top();
            st.pop();
        }
        return res;
    }
};
=====================================================================
1047. Remove All Adjacent Duplicates In String
You are given a string s consisting of lowercase English letters. A duplicate removal consists of choosing two adjacent and equal letters and removing them.
We repeatedly make duplicate removals on s until we no longer can.
Return the final string after all such duplicate removals have been made. It can be proven that the answer is unique.
