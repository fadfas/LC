class Solution {
public:
    string findReplaceString(string S, vector<int>& indexes, vector<string>& sources, vector<string>& targets) {
        vector<pair<int,int>> indexs_p;
        for(int i=0;i<indexes.size();++i){
            indexs_p.push_back({indexes[i],i});//学习这种方法！！将原始位置信息保留下来
        }
        sort(indexs_p.rbegin(),indexs_p.rend());//sort接受反向迭代器，从而降序排列；另外虽然元素为pair
                        //但是却依然可以直接排序（根据pair中的第一个元素）
        for(auto e:indexs_p){
            int index=e.first;
            string s=sources[e.second],t=targets[e.second];
            if(S.substr(index,s.size())==s){
                S=S.substr(0,index)+t+S.substr(index+s.size());
            }
        }
        return S;
    }
};
============================================
833. Find And Replace in String
To some string S, we will perform some replacement operations that replace groups of letters with new ones (not necessarily the same size).

Each replacement operation has 3 parameters: a starting index i, a source word x and a target word y.  The rule is that if x starts at position i in the original string S, then we will replace that occurrence of x with y.  If not, we do nothing.

For example, if we have S = "abcd" and we have some replacement operation i = 2, x = "cd", y = "ffff", then because "cd" starts at position 2 in the original string S, we will replace it with "ffff".

Using another example on S = "abcd", if we have both the replacement operation i = 0, x = "ab", y = "eee", as well as another replacement operation i = 2, x = "ec", y = "ffff", this second operation does nothing because in the original string S[2] = 'c', which doesn't match x[0] = 'e'.

All these operations occur simultaneously.  It's guaranteed that there won't be any overlap in replacement: for example, S = "abc", indexes = [0, 1], sources = ["ab","bc"] is not a valid test case.
