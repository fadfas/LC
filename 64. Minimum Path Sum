class Solution {
public:
int minPathSum(vector<vector<int>>& grid) {
	int m = grid.size();
	int n = grid[0].size();
	int* sum = new int[n];
	memset(sum, 0, sizeof(sum));  //保险起见还是初始化为0吧
	sum[0] = grid[0][0];
	int left = 0, up = 0;
	for (int i = 0; i<m; ++i) {
		for (int j = 0; j<n; ++j) {
			left = 0x7fffffff, up = 0x7fffffff;  //注意不能初始化为left=0,up=0
			if (!i & !j) {
				continue;
			}
			if (i>0)
				up = sum[j];
			if (j>0)
				left = sum[j - 1];
			sum[j] = min(up, left) + grid[i][j];
		}
	}
	return sum[n - 1];
}
};
===================================
64. Minimum Path Sum
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.
