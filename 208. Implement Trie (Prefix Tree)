class TrieNode{  //学习这种定义自己节点的放置为止 ！！！！！！！！！
public:
    vector<TrieNode*> children;//不可以vector<TrieNode*> children(26,nullptr);会报错
    bool isWord;//也可以用unordered_map
    TrieNode(){//学习构造器的用法
        isWord=false;
        children = vector<TrieNode*>(26,nullptr);//学习这种定义方式
    }
};

class Trie {
public:
    /** Initialize your data structure here. */
    Trie() {
        root=new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        TrieNode* pCur=root;
        for(auto &c:word){
            int idx=c-'a';
            if(pCur->children[idx]==nullptr){
                pCur->children[idx]=new TrieNode();
            }
            pCur=pCur->children[idx];
        }
        pCur->isWord=true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        TrieNode* pCur=root;
        for(auto &c:word){
            int idx=c-'a';
            if(pCur->children[idx]==nullptr)
                return false;
            pCur=pCur->children[idx];
        }
        return pCur->isWord;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        TrieNode* pCur=root;
        for(auto &c:prefix){
            int idx=c-'a';
            if(pCur->children[idx]==nullptr)
                return false;
            pCur=pCur->children[idx];
        }
        return true;
    }
private:
    TrieNode* root;
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * bool param_2 = obj.search(word);
 * bool param_3 = obj.startsWith(prefix);
 */
 ===========================================
 208. Implement Trie (Prefix Tree)
Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true
