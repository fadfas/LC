class Solution {
public:
    string minWindow(string S, string T) {
        int m=S.size();
        int n=T.size();
        int dp[m][n]={0};
        dp[0][0]=S[0]==T[0]?0:-1;
        for(int i=1;i<m;++i){
            if(S[i]==T[0])
                dp[i][0]=i;
            else
                dp[i][0]=dp[i-1][0];
        }
        
        for(int j=1;j<n;++j){
            dp[0][j]=-1;
        }
        
        for(int i=1;i<m;++i){
            for(int j=1;j<n;++j){
                if(S[i]==T[j])
                    dp[i][j]=dp[i-1][j-1];
                else
                    dp[i][j]=dp[i-1][j];
            }
        }
        int len=INT_MAX,start=0;
        for(int i=0;i<m;++i){
            if(dp[i][n-1]!=-1){
                if(i-dp[i][n-1]+1<len){
                    len=i-dp[i][n-1]+1;
                    start=dp[i][n-1];
                }
            }
        }
        
        return len==INT_MAX?"":S.substr(start,len);
    }
};
==========================================
727. Minimum Window Subsequence
Given strings S and T, find the minimum (contiguous) substring W of S, so that T is a subsequence of W.

If there is no such window in S that covers all characters in T, return the empty string "". If there are multiple such minimum-length windows, return the one with the left-most starting index.

Example 1:

Input: 
S = "abcdebdde", T = "bde"
Output: "bcde"
Explanation: 
"bcde" is the answer because it occurs before "bdde" which has the same length.
"deb" is not a smaller window because the elements of T in the window must occur in order
