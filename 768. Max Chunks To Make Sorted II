class Solution {
public:
    int maxChunksToSorted(vector<int>& arr) {
        int n=arr.size();
        vector<int> maxLeft(n,0);
        vector<int> minRight(n,0);
        maxLeft[0]=arr[0];
        for(int i=1;i<n;++i){
            maxLeft[i]=max(arr[i],maxLeft[i-1]);
        }
        
        minRight[n-1]=INT_MAX;
        for(int i=n-2;i>=0;--i){
            minRight[i]=min(arr[i+1],minRight[i+1]);
        }
        int res=0;
        for(int i=0;i<n;++i){
            if(maxLeft[i]<=minRight[i]){
                ++res;
            }
        }
        return res;
    }
};
==============================================
将大的问题，分解成对数组中每一个位置的判断。从而体现为从左至右处理一遍数组，然后再从右至左处理一遍数组
768. Max Chunks To Make Sorted II
This question is the same as "Max Chunks to Make Sorted" except the integers of the given array are not necessarily distinct, the input array could be up to length 2000, and the elements could be up to 10**8.

Given an array arr of integers (not necessarily distinct), we split the array into some number of "chunks" (partitions), and individually sort each chunk.  After concatenating them, the result equals the sorted array.

What is the most number of chunks we could have made?

Example 1:

Input: arr = [5,4,3,2,1]
Output: 1
Explanation:
Splitting into two or more chunks will not return the required result.
For example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn't sorted.
