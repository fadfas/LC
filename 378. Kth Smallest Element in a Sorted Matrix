class Solution {
public:
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        int l=matrix[0][0],r=matrix.back().back();
        while(l<r){
            int count=0;
            int mid=l+((r-l)>>1);
            for(int i=0;i<matrix.size();++i){
                count+=upper_bound(matrix[i].begin(),matrix[i].end(),mid)-matrix[i].begin();//找出每一行，小于等于mid的元素数量
            }//注意upper_bound返回的是迭代器，因此别忘了减去begin()
            if(count<k){
                l=mid+1;
            }else{
                r=mid;
            }
        }
        return l;
    }
};
=======================================
The key point for any binary search is to figure out the "Search Space". For me, I think there are two kind of "Search Space" -- index and range(the range from the smallest number to the biggest number). Most usually, when the array is sorted in one direction, we can use index as "search space", when the array is unsorted and we are going to find a specific number, we can use "range".
Let me give you two examples of these two "search space"
index -- A bunch of examples -- https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/ ( the array is sorted)
range -- https://leetcode.com/problems/find-the-duplicate-number/ (Unsorted Array)
The reason why we did not use index as "search space" for this problem is the matrix is sorted in two directions, we can not find a linear way to map the number and its index.

378. Kth Smallest Element in a Sorted Matrix
Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.
Note that it is the kth smallest element in the sorted order, not the kth distinct element.
1 2 3 4 4 5 6 7  对于4来说，既是第四小也是第五小
Example:
matrix = [
   [ 1,  5,  9],
   [10, 11, 13],
   [12, 13, 15]
],
k = 8,
return 13.
