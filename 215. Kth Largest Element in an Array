class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        int n=nums.size();
        int l=0,r=n-1;
        while(true){
            int pivort=partition(nums,l,r);
            if(pivort==k-1){
                return nums[pivort];
            }
            if(pivort<k-1){
                l=pivort+1;
            }else{
                r=pivort-1;
            }
        }
    }
private:
    int RandomPivort(int start, int end) {
	    int random = rand() % (end - start + 1) + start;
	    return random;
    }
    int partition(vector<int>& nums,int l,int r){
        int pivort=RandomPivort(l,r);//随机的pivort和开始和结束为止有关，不能直接rand()%r;
        swap(nums[pivort],nums[r]);
        int i=l-1,j=l;
        while(j<r){
            if(nums[j]<nums[r]){
                ++j;
            }else{
                if(i+1==j){
                    ++i,++j;
                }else{
                    ++i;
                    swap(nums[i],nums[j]);
                    ++j;
                }
            }
        }
        swap(nums[++i],nums[r]);
        return i;
    }
};
======================================
215. Kth Largest Element in an Array
Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.

Example 1:

Input: [3,2,1,5,6,4] and k = 2
Output: 5
