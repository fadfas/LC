class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        int n = nums.size();
        for (int i = n / 2 - 1; i >= 0; --i)
        {
            heapify(nums, n, i);
        }
        for (int i = n - 1; i >= 0; --i)
        {
            swap(nums[i], nums[0]);
            heapify(nums, i, 0);
            if(i==n-k){
                break;
            }
        }
        return nums[n - k];
    }

private:
    void heapify(vector<int> &nums,int n,int i){
        int largest = i;
        int left = 2 * i + 1;
        int right = 2 * i + 2;
        if(left<n && nums[largest]<nums[left]){
            largest = left;
        }
        if(right<n && nums[largest]<nums[right]){
            largest = right;
        }
        if(largest!=i){
            swap(nums[largest], nums[i]);
            heapify(nums, n, largest);
        }
    }
};
======================================
215. Kth Largest Element in an Array
Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.

Example 1:

Input: [3,2,1,5,6,4] and k = 2
Output: 5
