class Solution {
public:
    vector<int> pancakeSort(vector<int>& arr) {
        vector<int> res;
        for(int i=arr.size()-1;i>0;--i){//只剩一个的时候，就不用处理了
            int max_num=INT_MIN;
            int max_idx=-1;
            for(int j=0;j<=i;++j){
                if(arr[j]>max_num){
                    max_idx=j;
                    max_num=arr[j];
                }
            }
            reverse(arr.begin(),arr.begin()+max_idx+1);//注意reverse函数是左闭右开的翻转
            res.push_back(max_idx+1);
            reverse(arr.begin(),arr.begin()+i+1);
            res.push_back(i+1);
        }
        return res;
    }
};
=====================================================================
969. Pancake Sorting
Given an array of integers arr, sort the array by performing a series of pancake flips.
In one pancake flip we do the following steps:
Choose an integer k where 1 <= k <= arr.length.
Reverse the sub-array arr[0...k-1] (0-indexed).
For example, if arr = [3,2,1,4] and we performed a pancake flip choosing k = 3, we reverse the sub-array [3,2,1], so arr = [1,2,3,4] after the pancake flip at k = 3.
Return an array of the k-values corresponding to a sequence of pancake flips that sort arr. Any valid answer that sorts the array within 10 * arr.length flips will be judged as correct.
