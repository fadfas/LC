/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int carry=0;
        ListNode* pPre=new ListNode(-1);
        ListNode* pDummyHead=pPre;
        while(l1||l2||carry){//别忘了判断carry，否则结果会遗漏
            int sum=(l1?l1->val:0)+(l2?l2->val:0)+carry;
            if(sum>9){
                carry=1;
                sum-=10;
            }else{
                carry=0;
            }
            ListNode* pNode=new ListNode(sum);
            
            pPre->next=pNode;
            pPre=pNode;
            if(l1)
                l1=l1->next;
            if(l2)
                l2=l2->next;
        }
        return pDummyHead->next;
    }
};
==========================================
2. Add Two Numbers
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.
