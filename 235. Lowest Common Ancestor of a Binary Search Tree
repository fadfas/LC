/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        while(true){
            if(root->val<min(p->val,q->val)){
                root=root->right;
            }else if(root->val>max(p->val,q->val)){
                root=root->left;
            }else{
                break;
            }
        }
        return root;
    }
};
 
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(!root||!p||!q)
            return nullptr;
        return find(root,p,q);
    }
private:
    TreeNode* find(TreeNode* pNode,TreeNode* p,TreeNode* q){
        if(pNode->val>p->val&&pNode->val>q->val){
            return find(pNode->left,p,q);
        }
        if(pNode->val<p->val&&pNode->val<q->val){
            return find(pNode->right,p,q);
        }
        return pNode;
    }
};
============================================
235. Lowest Common Ancestor of a Binary Search Tree
Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

Given binary search tree:  root = [6,2,8,0,4,7,9,null,null,3,5]
Example 1:

Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
Output: 6
Explanation: The LCA of nodes 2 and 8 is 6.
