
class AutocompleteSystem {
public:
    AutocompleteSystem(vector<string> sentences, vector<int> times) {
        for (int i = 0; i < sentences.size(); ++i) {
            freq[sentences[i]] += times[i]; 
        }
        data = "";
    }
    
    vector<string> input(char c) {
        if (c == '#') {
            ++freq[data];
            data = "";
            return {};
        }
        data.push_back(c);
        auto cmp = [](pair<string, int>& a, pair<string, int>& b) {//不要学习这种定义比较函数的方法，学下面的那种
            return a.second > b.second || (a.second == b.second && a.first < b.first);
        };
        priority_queue<pair<string, int>, vector<pair<string, int>>, decltype(cmp) > q(cmp);
        //也可以不用优先队列，而是用set<pair<string,int>>，然后当输入第二个字符的时候，对之前的set进行再次过滤，从而提高效率
        for (auto f : freq) {
            bool matched = true;
            for (int i = 0; i < data.size(); ++i) {
                if (data[i] != f.first[i]) {
                    matched = false;
                    break;
                }
            }
            if (matched) {
                q.push(f);
                if (q.size() > 3) q.pop();
            }
        }
        vector<string> res(q.size());
        for (int i = q.size() - 1; i >= 0; --i) {
            res[i] = q.top().first; q.pop();
        }
        return res;
    }
    
private:
    unordered_map<string, int> freq;
    string data;
};

class AutocompleteSystem {//这个解法是有错的，而且面试的时候写一个字典树也太麻烦了，还是用上面那个方法吧
public:
    AutocompleteSystem(vector<string> sentences, vector<int> times) {
        pRoot=new TrieNode();
        pCur=pRoot;
        for(int i=0;i<sentences.size();++i){
            insert(pRoot,sentences[i],times[i]);
        }
    }
    
    vector<string> input(char c) {
        if(c=='#'){
            insert(pRoot,curInput,1);
            curInput.clear();//string类型的清空！！！
            pCur=nullptr;
            return {};
        }
        curInput.push_back(c);
        priority_queue<pair<string,int>,vector<pair<string,int>>,comp> pq;
        if(pCur&&pCur->children[c]){
            pCur=pCur->children[c];
            if(!pCur->str.empty()) pq.push({pCur->str,pCur->count});
            for(auto e:pCur->children){
                dfs(pCur,pq);
            }
            vector<string> res={};
            while(!pq.empty()&&res.size()<3){
                res.push_back(pq.top().first);
                pq.pop();
            }
            return res;
        }else{
            pCur=nullptr;
            return {};
        }
        return {};//上一次的输入已经没有匹配了，然后还继续输入，就会走到这个地方
        
    }
private:
    //unordered_map<string,int> histData;
    string curInput;
    struct TrieNode{  //构造体的声明方法！！！，另外要放在TrieNode* pRoot,*pCur;前面声明
        unordered_map<char,TrieNode*> children;
        string str;
        int count;
        TrieNode():str(""),count(0){};//构造函数学习！！！
    };//分号别忘了！！！！
    TrieNode* pRoot,*pCur;
    void insert(TrieNode* pNode,string str,int times){
        for(int i=0;i<str.size();++i){
            if(!pNode->children[str[i]]){
                pNode->children[str[i]]=new TrieNode();
            }
            pNode=pNode->children[str[i]];
        }
        pNode->str=str;
        pNode->count+=times;//注意是+=有可能重复的录入
    }
    struct comp{
        bool operator()(pair<string,int>& a,pair<string,int>& b){//注意有两个圆括号,参数写在第二个括号
                        // ，注意使用引用类型
            if(a.second==b.second) return a.first>b.first;
            return a.second<b.second;
        }
    };
    void dfs(TrieNode* pCur,priority_queue<pair<string,int>,vector<pair<string,int>>,comp>& pq){
        if(!pCur->str.empty()) pq.push({pCur->str,pCur->count});
        for(auto e:pCur->children){
            dfs(e.second,pq);
        }
    }

    
};

/**
 * Your AutocompleteSystem object will be instantiated and called as such:
 * AutocompleteSystem obj = new AutocompleteSystem(sentences, times);
 * vector<string> param_1 = obj.input(c);
 */
 ===============================
 642. Design Search Autocomplete System
Design a search autocomplete system for a search engine. Users may input a sentence (at least one word and end with a special character '#'). For each character they type except '#', you need to return the top 3 historical hot sentences that have prefix the same as the part of sentence already typed. Here are the specific rules:

The hot degree for a sentence is defined as the number of times a user typed the exactly same sentence before.
The returned top 3 hot sentences should be sorted by hot degree (The first is the hottest one). If several sentences have the same degree of hot, you need to use ASCII-code order (smaller one appears first).
If less than 3 hot sentences exist, then just return as many as you can.
When the input is a special character, it means the sentence ends, and in this case, you need to return an empty list.
Your job is to implement the following functions:

The constructor function:

AutocompleteSystem(String[] sentences, int[] times): This is the constructor. The input is historical data. Sentences is a string array consists of previously typed sentences. Times is the corresponding times a sentence has been typed. Your system should record these historical data.

Now, the user wants to input a new sentence. The following function will provide the next character the user types:

List<String> input(char c): The input c is the next character typed by the user. The character will only be lower-case letters ('a' to 'z'), blank space (' ') or a special character ('#'). Also, the previously typed sentence should be recorded in your system. The output will be the top 3 historical hot sentences that have prefix the same as the part of sentence already typed.
